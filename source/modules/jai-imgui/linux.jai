//
// This file was autogenerated.
//

#module_parameters(LINK_STATIC := false, IMGUI_USE_BGRA_PACKED_COLOR := true);

#if OS == .WINDOWS {
    #if LINK_STATIC {
        user32 :: #foreign_system_library "user32";
        imgui :: #foreign_library,no_dll "./win/static/imgui";
    } else {
        imgui :: #foreign_library "./win/dll/imgui";
    }
}
#if OS == .LINUX {
    #if LINK_STATIC {
        imgui :: #foreign_library,no_dll "./linux/static/imgui";
    } else {
        imgui :: #foreign_library "./linux/imgui";
    }
}

make_ImVec2 :: inline (a: float, b: float) -> ImVec2 {
    v: ImVec2 = ---;
    v.x = a;
    v.y = b;
    return v;
}

make_ImVec4 :: inline (a: float, b: float, c: float, d: float) -> ImVec4 {
    v: ImVec4 = ---;
    v.x = a;
    v.y = b;
    v.z = c;
    v.w = d;
    return v;
}

operator + :: inline (a: ImVec2, b: ImVec2) -> ImVec2 {
    return make_ImVec2(a.x + b.x, a.y + b.y);
}

TreeNode :: (fmt: string, args: ..Any) -> bool {
    fmt_z := tprint("%\0", fmt);
    txt := tprint(fmt_z, ..args);
    return TreeNode(txt.data);
}

TextColored :: (col: ImVec4, fmt: string, args: .. Any) {
    PushStyleColor(.Text, col);
    fmt_z := tprint("%\0", fmt);
    txt := tprint(fmt_z, ..args);
    Text(txt.data);
    PopStyleColor();
}

#if Preprocessor_Defines.USE_BGRA_PACKED_COLOR {
    IM_COL32_R_SHIFT :: 16;
    IM_COL32_G_SHIFT :: 8;
    IM_COL32_B_SHIFT :: 0;
    IM_COL32_A_SHIFT :: 24;
    IM_COL32_A_MASK  :: 0xFF000000;
} else {
    IM_COL32_R_SHIFT  ::  0;
    IM_COL32_G_SHIFT  ::  8;
    IM_COL32_B_SHIFT  ::  16;
    IM_COL32_A_SHIFT  ::  24;
    IM_COL32_A_MASK   ::  0xFF000000;
}
// This is a C preprocessor macro, should it be a Jai macro?
make_col32 :: (R : u32, G: u32, B: u32, A: u32) -> u32 {
    return cast(u32)((A<<IM_COL32_A_SHIFT) | (B<<IM_COL32_B_SHIFT) | 
        (G<<IM_COL32_G_SHIFT) | (R<<IM_COL32_R_SHIFT));
}
make_col32 :: (c: ImVec4) -> u32 {
    return make_col32(xx(c.x * 255), xx(c.y * 255), xx(c.z * 255), xx(c.w * 255));
}



#scope_file

#import "Basic";
// TODO: these manual types shouldn't be necessary
size_t   :: u64;
FILE     :: struct { opaque: *void; }
FLT_MIN  :: 0h00800000;
FLT_MAX  :: 0h7F7FFFFF;

check_size :: ($T: Type, expected_size_in_bytes: int, loc := #caller_location) {
    size_of_struct := size_of(T);
    Compiler :: #import "Compiler";
    if size_of_struct != expected_size_in_bytes {
        msg := tprint("expected struct '%' to be % bytes, but it was % instead.", T, expected_size_in_bytes, size_of_struct);
        Compiler.compiler_report(msg, loc=loc);
    }
}

#scope_export
ptrdiff_t :: s64;

size_t :: u64;

anon_struct_0 :: struct {
    __clang_max_align_nonce1: s64;
}
// #run check_size(anon_struct_0, 32);

max_align_t :: anon_struct_0;

ImDrawListSharedData :: struct {
}
// #run check_size(ImDrawListSharedData, 0);

ImFontBuilderIO :: struct {
}
// #run check_size(ImFontBuilderIO, 0);

Context :: struct {
}
// #run check_size(Context, 0);

NavInput :: s32;

ImTextureID :: *void;

ID :: u32;

InputTextCallback :: #type (a0: *InputTextCallbackData) -> s32 #c_call;

SizeCallback :: #type (a0: *SizeCallbackData) -> void #c_call;

MemAllocFunc :: #type (a0: size_t, a1: *void) -> *void #c_call;

MemFreeFunc :: #type (a0: *void, a1: *void) -> void #c_call;

ImWchar16 :: u16;

ImWchar32 :: u32;

ImWchar :: ImWchar16;

ImS8 :: s8;

ImU8 :: u8;

ImS16 :: s16;

ImU16 :: u16;

ImS32 :: s32;

ImU32 :: u32;

ImS64 :: s64;

ImU64 :: u64;

ImVec2 :: struct {
    x: float;
    y: float;
    /* (jaicc: omitted inline function)
    operator[] :: (this: *ImVec2, idx: size_t) -> float #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    operator[] :: (this: *ImVec2, idx: size_t) -> *float #cpp_method {
    }
    */

}
// #run check_size(ImVec2, 8);

ImVec4 :: struct {
    x: float;
    y: float;
    z: float;
    w: float;
}
// #run check_size(ImVec4, 16);

// ImGui :: struct { // this namespace was flattened by '--flatten-namespace'
    CreateContext :: (shared_font_atlas: *ImFontAtlas = null) -> *Context #foreign imgui "_ZN5ImGui13CreateContextEP11ImFontAtlas";
    DestroyContext :: (ctx: *Context = null) -> void #foreign imgui "_ZN5ImGui14DestroyContextEP12ImGuiContext";
    GetCurrentContext :: () -> *Context #foreign imgui "_ZN5ImGui17GetCurrentContextEv";
    SetCurrentContext :: (ctx: *Context) -> void #foreign imgui "_ZN5ImGui17SetCurrentContextEP12ImGuiContext";
    GetIO :: () -> *IO #foreign imgui "_ZN5ImGui5GetIOEv";
    GetStyle :: () -> *Style #foreign imgui "_ZN5ImGui8GetStyleEv";
    NewFrame :: () -> void #foreign imgui "_ZN5ImGui8NewFrameEv";
    EndFrame :: () -> void #foreign imgui "_ZN5ImGui8EndFrameEv";
    Render :: () -> void #foreign imgui "_ZN5ImGui6RenderEv";
    GetDrawData :: () -> *ImDrawData #foreign imgui "_ZN5ImGui11GetDrawDataEv";
    ShowDemoWindow :: (p_open: *bool = null) -> void #foreign imgui "_ZN5ImGui14ShowDemoWindowEPb";
    ShowMetricsWindow :: (p_open: *bool = null) -> void #foreign imgui "_ZN5ImGui17ShowMetricsWindowEPb";
    ShowAboutWindow :: (p_open: *bool = null) -> void #foreign imgui "_ZN5ImGui15ShowAboutWindowEPb";
    ShowStyleEditor :: (ref: *Style = null) -> void #foreign imgui "_ZN5ImGui15ShowStyleEditorEP10ImGuiStyle";
    ShowStyleSelector :: (label: *u8) -> bool #foreign imgui "_ZN5ImGui17ShowStyleSelectorEPKc";
    ShowFontSelector :: (label: *u8) -> void #foreign imgui "_ZN5ImGui16ShowFontSelectorEPKc";
    ShowUserGuide :: () -> void #foreign imgui "_ZN5ImGui13ShowUserGuideEv";
    GetVersion :: () -> *u8 #foreign imgui "_ZN5ImGui10GetVersionEv";
    StyleColorsDark :: (dst: *Style = null) -> void #foreign imgui "_ZN5ImGui15StyleColorsDarkEP10ImGuiStyle";
    StyleColorsLight :: (dst: *Style = null) -> void #foreign imgui "_ZN5ImGui16StyleColorsLightEP10ImGuiStyle";
    StyleColorsClassic :: (dst: *Style = null) -> void #foreign imgui "_ZN5ImGui18StyleColorsClassicEP10ImGuiStyle";
    Begin :: (name: *u8, p_open: *bool = null, flags: WindowFlags = .None) -> bool #foreign imgui "_ZN5ImGui5BeginEPKcPbi";
    End :: () -> void #foreign imgui "_ZN5ImGui3EndEv";
    BeginChild :: (str_id: *u8, size: ImVec2 = ImVec2.{0,0}, border: bool = false, flags: WindowFlags = .None) -> bool {
        BeginChild_internal :: (str_id: *u8, size: *ImVec2, border: bool, flags: WindowFlags) -> bool #foreign imgui "_ZN5ImGui10BeginChildEPKcRK6ImVec2bi";
        return BeginChild_internal(str_id, *size, border, flags);
    }
    BeginChild :: (id: ID, size: ImVec2 = ImVec2.{0,0}, border: bool = false, flags: WindowFlags = .None) -> bool {
        BeginChild_internal :: (id: ID, size: *ImVec2, border: bool, flags: WindowFlags) -> bool #foreign imgui "_ZN5ImGui10BeginChildEjRK6ImVec2bi";
        return BeginChild_internal(id, *size, border, flags);
    }
    EndChild :: () -> void #foreign imgui "_ZN5ImGui8EndChildEv";
    IsWindowAppearing :: () -> bool #foreign imgui "_ZN5ImGui17IsWindowAppearingEv";
    IsWindowCollapsed :: () -> bool #foreign imgui "_ZN5ImGui17IsWindowCollapsedEv";
    IsWindowFocused :: (flags: FocusedFlags = .None) -> bool #foreign imgui "_ZN5ImGui15IsWindowFocusedEi";
    IsWindowHovered :: (flags: HoveredFlags = .None) -> bool #foreign imgui "_ZN5ImGui15IsWindowHoveredEi";
    GetWindowDrawList :: () -> *ImDrawList #foreign imgui "_ZN5ImGui17GetWindowDrawListEv";
    GetWindowDpiScale :: () -> float #foreign imgui "_ZN5ImGui17GetWindowDpiScaleEv";
    GetWindowPos :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui12GetWindowPosEv";
    GetWindowSize :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui13GetWindowSizeEv";
    GetWindowWidth :: () -> float #foreign imgui "_ZN5ImGui14GetWindowWidthEv";
    GetWindowHeight :: () -> float #foreign imgui "_ZN5ImGui15GetWindowHeightEv";
    GetWindowViewport :: () -> *Viewport #foreign imgui "_ZN5ImGui17GetWindowViewportEv";
    SetNextWindowPos :: (pos: ImVec2, cond: Cond = .None, pivot: ImVec2 = ImVec2.{0,0}) {
        SetNextWindowPos_internal :: (pos: *ImVec2, cond: Cond, pivot: *ImVec2) -> void #foreign imgui "_ZN5ImGui16SetNextWindowPosERK6ImVec2iS2_";
        SetNextWindowPos_internal(*pos, cond, *pivot);
    }
    SetNextWindowSize :: (size: ImVec2, cond: Cond = .None) {
        SetNextWindowSize_internal :: (size: *ImVec2, cond: Cond) -> void #foreign imgui "_ZN5ImGui17SetNextWindowSizeERK6ImVec2i";
        SetNextWindowSize_internal(*size, cond);
    }
    SetNextWindowSizeConstraints :: (size_min: ImVec2, size_max: ImVec2, custom_callback: SizeCallback = null, custom_callback_data: *void = null) {
        SetNextWindowSizeConstraints_internal :: (size_min: *ImVec2, size_max: *ImVec2, custom_callback: SizeCallback, custom_callback_data: *void) -> void #foreign imgui "_ZN5ImGui28SetNextWindowSizeConstraintsERK6ImVec2S2_PFvP21ImGuiSizeCallbackDataEPv";
        SetNextWindowSizeConstraints_internal(*size_min, *size_max, custom_callback, custom_callback_data);
    }
    SetNextWindowContentSize :: (size: ImVec2) {
        SetNextWindowContentSize_internal :: (size: *ImVec2) -> void #foreign imgui "_ZN5ImGui24SetNextWindowContentSizeERK6ImVec2";
        SetNextWindowContentSize_internal(*size);
    }
    SetNextWindowCollapsed :: (collapsed: bool, cond: Cond = .None) -> void #foreign imgui "_ZN5ImGui22SetNextWindowCollapsedEbi";
    SetNextWindowFocus :: () -> void #foreign imgui "_ZN5ImGui18SetNextWindowFocusEv";
    SetNextWindowBgAlpha :: (alpha: float) -> void #foreign imgui "_ZN5ImGui20SetNextWindowBgAlphaEf";
    SetNextWindowViewport :: (viewport_id: ID) -> void #foreign imgui "_ZN5ImGui21SetNextWindowViewportEj";
    SetWindowPos :: (pos: ImVec2, cond: Cond = .None) {
        SetWindowPos_internal :: (pos: *ImVec2, cond: Cond) -> void #foreign imgui "_ZN5ImGui12SetWindowPosERK6ImVec2i";
        SetWindowPos_internal(*pos, cond);
    }
    SetWindowSize :: (size: ImVec2, cond: Cond = .None) {
        SetWindowSize_internal :: (size: *ImVec2, cond: Cond) -> void #foreign imgui "_ZN5ImGui13SetWindowSizeERK6ImVec2i";
        SetWindowSize_internal(*size, cond);
    }
    SetWindowCollapsed :: (collapsed: bool, cond: Cond = .None) -> void #foreign imgui "_ZN5ImGui18SetWindowCollapsedEbi";
    SetWindowFocus :: () -> void #foreign imgui "_ZN5ImGui14SetWindowFocusEv";
    SetWindowFontScale :: (scale: float) -> void #foreign imgui "_ZN5ImGui18SetWindowFontScaleEf";
    SetWindowPos :: (name: *u8, pos: ImVec2, cond: Cond = .None) {
        SetWindowPos_internal :: (name: *u8, pos: *ImVec2, cond: Cond) -> void #foreign imgui "_ZN5ImGui12SetWindowPosEPKcRK6ImVec2i";
        SetWindowPos_internal(name, *pos, cond);
    }
    SetWindowSize :: (name: *u8, size: ImVec2, cond: Cond = .None) {
        SetWindowSize_internal :: (name: *u8, size: *ImVec2, cond: Cond) -> void #foreign imgui "_ZN5ImGui13SetWindowSizeEPKcRK6ImVec2i";
        SetWindowSize_internal(name, *size, cond);
    }
    SetWindowCollapsed :: (name: *u8, collapsed: bool, cond: Cond = .None) -> void #foreign imgui "_ZN5ImGui18SetWindowCollapsedEPKcbi";
    SetWindowFocus :: (name: *u8) -> void #foreign imgui "_ZN5ImGui14SetWindowFocusEPKc";
    GetContentRegionAvail :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui21GetContentRegionAvailEv";
    GetContentRegionMax :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui19GetContentRegionMaxEv";
    GetWindowContentRegionMin :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui25GetWindowContentRegionMinEv";
    GetWindowContentRegionMax :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui25GetWindowContentRegionMaxEv";
    GetWindowContentRegionWidth :: () -> float #foreign imgui "_ZN5ImGui27GetWindowContentRegionWidthEv";
    GetScrollX :: () -> float #foreign imgui "_ZN5ImGui10GetScrollXEv";
    GetScrollY :: () -> float #foreign imgui "_ZN5ImGui10GetScrollYEv";
    SetScrollX :: (scroll_x: float) -> void #foreign imgui "_ZN5ImGui10SetScrollXEf";
    SetScrollY :: (scroll_y: float) -> void #foreign imgui "_ZN5ImGui10SetScrollYEf";
    GetScrollMaxX :: () -> float #foreign imgui "_ZN5ImGui13GetScrollMaxXEv";
    GetScrollMaxY :: () -> float #foreign imgui "_ZN5ImGui13GetScrollMaxYEv";
    SetScrollHereX :: (center_x_ratio: float = 0.5) -> void #foreign imgui "_ZN5ImGui14SetScrollHereXEf";
    SetScrollHereY :: (center_y_ratio: float = 0.5) -> void #foreign imgui "_ZN5ImGui14SetScrollHereYEf";
    SetScrollFromPosX :: (local_x: float, center_x_ratio: float = 0.5) -> void #foreign imgui "_ZN5ImGui17SetScrollFromPosXEff";
    SetScrollFromPosY :: (local_y: float, center_y_ratio: float = 0.5) -> void #foreign imgui "_ZN5ImGui17SetScrollFromPosYEff";
    PushFont :: (font: *ImFont) -> void #foreign imgui "_ZN5ImGui8PushFontEP6ImFont";
    PopFont :: () -> void #foreign imgui "_ZN5ImGui7PopFontEv";
    PushStyleColor :: (idx: Col, col: ImU32) -> void #foreign imgui "_ZN5ImGui14PushStyleColorEij";
    PushStyleColor :: (idx: Col, col: ImVec4) {
        PushStyleColor_internal :: (idx: Col, col: *ImVec4) -> void #foreign imgui "_ZN5ImGui14PushStyleColorEiRK6ImVec4";
        PushStyleColor_internal(idx, *col);
    }
    PopStyleColor :: (count: s32 = 1) -> void #foreign imgui "_ZN5ImGui13PopStyleColorEi";
    PushStyleVar :: (idx: StyleVar, val: float) -> void #foreign imgui "_ZN5ImGui12PushStyleVarEif";
    PushStyleVar :: (idx: StyleVar, val: ImVec2) {
        PushStyleVar_internal :: (idx: StyleVar, val: *ImVec2) -> void #foreign imgui "_ZN5ImGui12PushStyleVarEiRK6ImVec2";
        PushStyleVar_internal(idx, *val);
    }
    PopStyleVar :: (count: s32 = 1) -> void #foreign imgui "_ZN5ImGui11PopStyleVarEi";
    PushAllowKeyboardFocus :: (allow_keyboard_focus: bool) -> void #foreign imgui "_ZN5ImGui22PushAllowKeyboardFocusEb";
    PopAllowKeyboardFocus :: () -> void #foreign imgui "_ZN5ImGui21PopAllowKeyboardFocusEv";
    PushButtonRepeat :: (repeat: bool) -> void #foreign imgui "_ZN5ImGui16PushButtonRepeatEb";
    PopButtonRepeat :: () -> void #foreign imgui "_ZN5ImGui15PopButtonRepeatEv";
    PushItemWidth :: (item_width: float) -> void #foreign imgui "_ZN5ImGui13PushItemWidthEf";
    PopItemWidth :: () -> void #foreign imgui "_ZN5ImGui12PopItemWidthEv";
    SetNextItemWidth :: (item_width: float) -> void #foreign imgui "_ZN5ImGui16SetNextItemWidthEf";
    CalcItemWidth :: () -> float #foreign imgui "_ZN5ImGui13CalcItemWidthEv";
    PushTextWrapPos :: (wrap_local_pos_x: float = 0.0) -> void #foreign imgui "_ZN5ImGui15PushTextWrapPosEf";
    PopTextWrapPos :: () -> void #foreign imgui "_ZN5ImGui14PopTextWrapPosEv";
    GetFont :: () -> *ImFont #foreign imgui "_ZN5ImGui7GetFontEv";
    GetFontSize :: () -> float #foreign imgui "_ZN5ImGui11GetFontSizeEv";
    GetFontTexUvWhitePixel :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui22GetFontTexUvWhitePixelEv";
    GetColorU32 :: (idx: Col, alpha_mul: float = 1.0) -> ImU32 #foreign imgui "_ZN5ImGui11GetColorU32Eif";
    GetColorU32 :: (col: ImVec4) -> ImU32 {
        GetColorU32_internal :: (col: *ImVec4) -> ImU32 #foreign imgui "_ZN5ImGui11GetColorU32ERK6ImVec4";
        return GetColorU32_internal(*col);
    }
    GetColorU32 :: (col: ImU32) -> ImU32 #foreign imgui "_ZN5ImGui11GetColorU32Ej";
    GetStyleColorVec4 :: (idx: Col) -> *ImVec4 #foreign imgui "_ZN5ImGui17GetStyleColorVec4Ei";
    Separator :: () -> void #foreign imgui "_ZN5ImGui9SeparatorEv";
    SameLine :: (offset_from_start_x: float = 0.0, spacing: float = -1.0) -> void #foreign imgui "_ZN5ImGui8SameLineEff";
    NewLine :: () -> void #foreign imgui "_ZN5ImGui7NewLineEv";
    Spacing :: () -> void #foreign imgui "_ZN5ImGui7SpacingEv";
    Dummy :: (size: ImVec2) {
        Dummy_internal :: (size: *ImVec2) -> void #foreign imgui "_ZN5ImGui5DummyERK6ImVec2";
        Dummy_internal(*size);
    }
    Indent :: (indent_w: float = 0.0) -> void #foreign imgui "_ZN5ImGui6IndentEf";
    Unindent :: (indent_w: float = 0.0) -> void #foreign imgui "_ZN5ImGui8UnindentEf";
    BeginGroup :: () -> void #foreign imgui "_ZN5ImGui10BeginGroupEv";
    EndGroup :: () -> void #foreign imgui "_ZN5ImGui8EndGroupEv";
    GetCursorPos :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui12GetCursorPosEv";
    GetCursorPosX :: () -> float #foreign imgui "_ZN5ImGui13GetCursorPosXEv";
    GetCursorPosY :: () -> float #foreign imgui "_ZN5ImGui13GetCursorPosYEv";
    SetCursorPos :: (local_pos: ImVec2) {
        SetCursorPos_internal :: (local_pos: *ImVec2) -> void #foreign imgui "_ZN5ImGui12SetCursorPosERK6ImVec2";
        SetCursorPos_internal(*local_pos);
    }
    SetCursorPosX :: (local_x: float) -> void #foreign imgui "_ZN5ImGui13SetCursorPosXEf";
    SetCursorPosY :: (local_y: float) -> void #foreign imgui "_ZN5ImGui13SetCursorPosYEf";
    GetCursorStartPos :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui17GetCursorStartPosEv";
    GetCursorScreenPos :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui18GetCursorScreenPosEv";
    SetCursorScreenPos :: (pos: ImVec2) {
        SetCursorScreenPos_internal :: (pos: *ImVec2) -> void #foreign imgui "_ZN5ImGui18SetCursorScreenPosERK6ImVec2";
        SetCursorScreenPos_internal(*pos);
    }
    AlignTextToFramePadding :: () -> void #foreign imgui "_ZN5ImGui23AlignTextToFramePaddingEv";
    GetTextLineHeight :: () -> float #foreign imgui "_ZN5ImGui17GetTextLineHeightEv";
    GetTextLineHeightWithSpacing :: () -> float #foreign imgui "_ZN5ImGui28GetTextLineHeightWithSpacingEv";
    GetFrameHeight :: () -> float #foreign imgui "_ZN5ImGui14GetFrameHeightEv";
    GetFrameHeightWithSpacing :: () -> float #foreign imgui "_ZN5ImGui25GetFrameHeightWithSpacingEv";
    PushID :: (str_id: *u8) -> void #foreign imgui "_ZN5ImGui6PushIDEPKc";
    PushID :: (str_id: string) {
        PushID_internal :: (str_id_begin: *u8, str_id_end: *u8) -> void #foreign imgui "_ZN5ImGui6PushIDEPKcS1_";
        PushID_internal(str_id.data, str_id.data + str_id.count);
    }
    PushID :: (ptr_id: *void) -> void #foreign imgui "_ZN5ImGui6PushIDEPKv";
    PushID :: (int_id: s32) -> void #foreign imgui "_ZN5ImGui6PushIDEi";
    PopID :: () -> void #foreign imgui "_ZN5ImGui5PopIDEv";
    GetID :: (str_id: *u8) -> ID #foreign imgui "_ZN5ImGui5GetIDEPKc";
    GetID :: (str_id: string) -> ID {
        GetID_internal :: (str_id_begin: *u8, str_id_end: *u8) -> ID #foreign imgui "_ZN5ImGui5GetIDEPKcS1_";
        return GetID_internal(str_id.data, str_id.data + str_id.count);
    }
    GetID :: (ptr_id: *void) -> ID #foreign imgui "_ZN5ImGui5GetIDEPKv";
    TextUnformatted :: (text: string) {
        TextUnformatted_internal :: (text: *u8, text_end: *u8) -> void #foreign imgui "_ZN5ImGui15TextUnformattedEPKcS1_";
        TextUnformatted_internal(text.data, text.data + text.count);
    }
    Text :: (fmt: *u8, __args: ..Any) -> void #foreign imgui "_ZN5ImGui4TextEPKcz";
    /* (jaicc: omitted function with valist)
    TextV :: (fmt: *u8, args: va_list) -> void #foreign imgui "_ZN5ImGui5TextVEPKcP13__va_list_tag";
    */

    TextColored :: (col: ImVec4, fmt: *u8, __args: ..Any) {
        TextColored_internal :: (col: *ImVec4, fmt: *u8, __args: ..Any) -> void #foreign imgui "_ZN5ImGui11TextColoredERK6ImVec4PKcz";
        TextColored_internal(*col, fmt);
    }
    /* (jaicc: omitted function with valist)
    TextColoredV :: (col: ImVec4, fmt: *u8, args: va_list) {
        TextColoredV_internal :: (col: *ImVec4, fmt: *u8, args: va_list) -> void #foreign imgui "_ZN5ImGui12TextColoredVERK6ImVec4PKcP13__va_list_tag";
        TextColoredV_internal(*col, fmt, args);
    }
    */

    TextDisabled :: (fmt: *u8, __args: ..Any) -> void #foreign imgui "_ZN5ImGui12TextDisabledEPKcz";
    /* (jaicc: omitted function with valist)
    TextDisabledV :: (fmt: *u8, args: va_list) -> void #foreign imgui "_ZN5ImGui13TextDisabledVEPKcP13__va_list_tag";
    */

    TextWrapped :: (fmt: *u8, __args: ..Any) -> void #foreign imgui "_ZN5ImGui11TextWrappedEPKcz";
    /* (jaicc: omitted function with valist)
    TextWrappedV :: (fmt: *u8, args: va_list) -> void #foreign imgui "_ZN5ImGui12TextWrappedVEPKcP13__va_list_tag";
    */

    LabelText :: (label: *u8, fmt: *u8, __args: ..Any) -> void #foreign imgui "_ZN5ImGui9LabelTextEPKcS1_z";
    /* (jaicc: omitted function with valist)
    LabelTextV :: (label: *u8, fmt: *u8, args: va_list) -> void #foreign imgui "_ZN5ImGui10LabelTextVEPKcS1_P13__va_list_tag";
    */

    BulletText :: (fmt: *u8, __args: ..Any) -> void #foreign imgui "_ZN5ImGui10BulletTextEPKcz";
    /* (jaicc: omitted function with valist)
    BulletTextV :: (fmt: *u8, args: va_list) -> void #foreign imgui "_ZN5ImGui11BulletTextVEPKcP13__va_list_tag";
    */

    Button :: (label: *u8, size: ImVec2 = ImVec2.{0,0}) -> bool {
        Button_internal :: (label: *u8, size: *ImVec2) -> bool #foreign imgui "_ZN5ImGui6ButtonEPKcRK6ImVec2";
        return Button_internal(label, *size);
    }
    SmallButton :: (label: *u8) -> bool #foreign imgui "_ZN5ImGui11SmallButtonEPKc";
    InvisibleButton :: (str_id: *u8, size: ImVec2, flags: ButtonFlags = .None) -> bool {
        InvisibleButton_internal :: (str_id: *u8, size: *ImVec2, flags: ButtonFlags) -> bool #foreign imgui "_ZN5ImGui15InvisibleButtonEPKcRK6ImVec2i";
        return InvisibleButton_internal(str_id, *size, flags);
    }
    ArrowButton :: (str_id: *u8, dir: Dir) -> bool #foreign imgui "_ZN5ImGui11ArrowButtonEPKci";
    Image :: (user_texture_id: ImTextureID, size: ImVec2, uv0: ImVec2 = ImVec2.{0,0}, uv1: ImVec2 = ImVec2.{1,1}, tint_col: ImVec4 = ImVec4.{1,1,1,1}, border_col: ImVec4 = ImVec4.{0,0,0,0}) {
        Image_internal :: (user_texture_id: ImTextureID, size: *ImVec2, uv0: *ImVec2, uv1: *ImVec2, tint_col: *ImVec4, border_col: *ImVec4) -> void #foreign imgui "_ZN5ImGui5ImageEPvRK6ImVec2S3_S3_RK6ImVec4S6_";
        Image_internal(user_texture_id, *size, *uv0, *uv1, *tint_col, *border_col);
    }
    ImageButton :: (user_texture_id: ImTextureID, size: ImVec2, uv0: ImVec2 = ImVec2.{0,0}, uv1: ImVec2 = ImVec2.{1,1}, frame_padding: s32 = -1, bg_col: ImVec4 = ImVec4.{0,0,0,0}, tint_col: ImVec4 = ImVec4.{1,1,1,1}) -> bool {
        ImageButton_internal :: (user_texture_id: ImTextureID, size: *ImVec2, uv0: *ImVec2, uv1: *ImVec2, frame_padding: s32, bg_col: *ImVec4, tint_col: *ImVec4) -> bool #foreign imgui "_ZN5ImGui11ImageButtonEPvRK6ImVec2S3_S3_iRK6ImVec4S6_";
        return ImageButton_internal(user_texture_id, *size, *uv0, *uv1, frame_padding, *bg_col, *tint_col);
    }
    Checkbox :: (label: *u8, v: *bool) -> bool #foreign imgui "_ZN5ImGui8CheckboxEPKcPb";
    CheckboxFlags :: (label: *u8, flags: *s32, flags_value: s32) -> bool #foreign imgui "_ZN5ImGui13CheckboxFlagsEPKcPii";
    CheckboxFlags :: (label: *u8, flags: *u32, flags_value: u32) -> bool #foreign imgui "_ZN5ImGui13CheckboxFlagsEPKcPjj";
    RadioButton :: (label: *u8, active: bool) -> bool #foreign imgui "_ZN5ImGui11RadioButtonEPKcb";
    RadioButton :: (label: *u8, v: *s32, v_button: s32) -> bool #foreign imgui "_ZN5ImGui11RadioButtonEPKcPii";
    ProgressBar :: (fraction: float, size_arg: ImVec2 = ImVec2.{-FLT_MIN,0}, overlay: *u8 = null) {
        ProgressBar_internal :: (fraction: float, size_arg: *ImVec2, overlay: *u8) -> void #foreign imgui "_ZN5ImGui11ProgressBarEfRK6ImVec2PKc";
        ProgressBar_internal(fraction, *size_arg, overlay);
    }
    Bullet :: () -> void #foreign imgui "_ZN5ImGui6BulletEv";
    BeginCombo :: (label: *u8, preview_value: *u8, flags: ComboFlags = .None) -> bool #foreign imgui "_ZN5ImGui10BeginComboEPKcS1_i";
    EndCombo :: () -> void #foreign imgui "_ZN5ImGui8EndComboEv";
    Combo :: (label: *u8, current_item: *s32, items: **u8, items_count: s32, popup_max_height_in_items: s32 = -1) -> bool #foreign imgui "_ZN5ImGui5ComboEPKcPiPKS1_ii";
    Combo :: (label: *u8, current_item: *s32, items_separated_by_zeros: *u8, popup_max_height_in_items: s32 = -1) -> bool #foreign imgui "_ZN5ImGui5ComboEPKcPiS1_i";
    Combo :: (label: *u8, current_item: *s32, items_getter: #type (a0: *void, a1: s32, a2: **u8) -> bool #c_call, data: *void, items_count: s32, popup_max_height_in_items: s32 = -1) -> bool #foreign imgui "_ZN5ImGui5ComboEPKcPiPFbPviPS1_ES3_ii";
    DragFloat :: (label: *u8, v: *float, v_speed: float = 1.0, v_min: float = 0.0, v_max: float = 0.0, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui9DragFloatEPKcPffffS1_i";
    DragFloat2 :: (label: *u8, v: *[2] float, v_speed: float = 1.0, v_min: float = 0.0, v_max: float = 0.0, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui10DragFloat2EPKcPffffS1_i";
    DragFloat3 :: (label: *u8, v: *[3] float, v_speed: float = 1.0, v_min: float = 0.0, v_max: float = 0.0, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui10DragFloat3EPKcPffffS1_i";
    DragFloat4 :: (label: *u8, v: *[4] float, v_speed: float = 1.0, v_min: float = 0.0, v_max: float = 0.0, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui10DragFloat4EPKcPffffS1_i";
    DragFloatRange2 :: (label: *u8, v_current_min: *float, v_current_max: *float, v_speed: float = 1.0, v_min: float = 0.0, v_max: float = 0.0, format: *u8 = "%.3f", format_max: *u8 = null, flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui15DragFloatRange2EPKcPfS2_fffS1_S1_i";
    DragInt :: (label: *u8, v: *s32, v_speed: float = 1.0, v_min: s32 = 0, v_max: s32 = 0, format: *u8 = "%d", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui7DragIntEPKcPifiiS1_i";
    DragInt2 :: (label: *u8, v: *[2] s32, v_speed: float = 1.0, v_min: s32 = 0, v_max: s32 = 0, format: *u8 = "%d", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui8DragInt2EPKcPifiiS1_i";
    DragInt3 :: (label: *u8, v: *[3] s32, v_speed: float = 1.0, v_min: s32 = 0, v_max: s32 = 0, format: *u8 = "%d", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui8DragInt3EPKcPifiiS1_i";
    DragInt4 :: (label: *u8, v: *[4] s32, v_speed: float = 1.0, v_min: s32 = 0, v_max: s32 = 0, format: *u8 = "%d", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui8DragInt4EPKcPifiiS1_i";
    DragIntRange2 :: (label: *u8, v_current_min: *s32, v_current_max: *s32, v_speed: float = 1.0, v_min: s32 = 0, v_max: s32 = 0, format: *u8 = "%d", format_max: *u8 = null, flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui13DragIntRange2EPKcPiS2_fiiS1_S1_i";
    DragScalar :: (label: *u8, data_type: DataType, p_data: *void, v_speed: float = 1.0, p_min: *void = null, p_max: *void = null, format: *u8 = null, flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui10DragScalarEPKciPvfPKvS4_S1_i";
    DragScalarN :: (label: *u8, data_type: DataType, p_data: *void, components: s32, v_speed: float = 1.0, p_min: *void = null, p_max: *void = null, format: *u8 = null, flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui11DragScalarNEPKciPvifPKvS4_S1_i";
    SliderFloat :: (label: *u8, v: *float, v_min: float, v_max: float, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui11SliderFloatEPKcPfffS1_i";
    SliderFloat2 :: (label: *u8, v: *[2] float, v_min: float, v_max: float, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui12SliderFloat2EPKcPfffS1_i";
    SliderFloat3 :: (label: *u8, v: *[3] float, v_min: float, v_max: float, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui12SliderFloat3EPKcPfffS1_i";
    SliderFloat4 :: (label: *u8, v: *[4] float, v_min: float, v_max: float, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui12SliderFloat4EPKcPfffS1_i";
    SliderAngle :: (label: *u8, v_rad: *float, v_degrees_min: float = -360.0, v_degrees_max: float = 360.0, format: *u8 = "%.0f deg", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui11SliderAngleEPKcPfffS1_i";
    SliderInt :: (label: *u8, v: *s32, v_min: s32, v_max: s32, format: *u8 = "%d", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui9SliderIntEPKcPiiiS1_i";
    SliderInt2 :: (label: *u8, v: *[2] s32, v_min: s32, v_max: s32, format: *u8 = "%d", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui10SliderInt2EPKcPiiiS1_i";
    SliderInt3 :: (label: *u8, v: *[3] s32, v_min: s32, v_max: s32, format: *u8 = "%d", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui10SliderInt3EPKcPiiiS1_i";
    SliderInt4 :: (label: *u8, v: *[4] s32, v_min: s32, v_max: s32, format: *u8 = "%d", flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui10SliderInt4EPKcPiiiS1_i";
    SliderScalar :: (label: *u8, data_type: DataType, p_data: *void, p_min: *void, p_max: *void, format: *u8 = null, flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui12SliderScalarEPKciPvPKvS4_S1_i";
    SliderScalarN :: (label: *u8, data_type: DataType, p_data: *void, components: s32, p_min: *void, p_max: *void, format: *u8 = null, flags: SliderFlags = .None) -> bool #foreign imgui "_ZN5ImGui13SliderScalarNEPKciPviPKvS4_S1_i";
    VSliderFloat :: (label: *u8, size: ImVec2, v: *float, v_min: float, v_max: float, format: *u8 = "%.3f", flags: SliderFlags = .None) -> bool {
        VSliderFloat_internal :: (label: *u8, size: *ImVec2, v: *float, v_min: float, v_max: float, format: *u8, flags: SliderFlags) -> bool #foreign imgui "_ZN5ImGui12VSliderFloatEPKcRK6ImVec2PfffS1_i";
        return VSliderFloat_internal(label, *size, v, v_min, v_max, format, flags);
    }
    VSliderInt :: (label: *u8, size: ImVec2, v: *s32, v_min: s32, v_max: s32, format: *u8 = "%d", flags: SliderFlags = .None) -> bool {
        VSliderInt_internal :: (label: *u8, size: *ImVec2, v: *s32, v_min: s32, v_max: s32, format: *u8, flags: SliderFlags) -> bool #foreign imgui "_ZN5ImGui10VSliderIntEPKcRK6ImVec2PiiiS1_i";
        return VSliderInt_internal(label, *size, v, v_min, v_max, format, flags);
    }
    VSliderScalar :: (label: *u8, size: ImVec2, data_type: DataType, p_data: *void, p_min: *void, p_max: *void, format: *u8 = null, flags: SliderFlags = .None) -> bool {
        VSliderScalar_internal :: (label: *u8, size: *ImVec2, data_type: DataType, p_data: *void, p_min: *void, p_max: *void, format: *u8, flags: SliderFlags) -> bool #foreign imgui "_ZN5ImGui13VSliderScalarEPKcRK6ImVec2iPvPKvS7_S1_i";
        return VSliderScalar_internal(label, *size, data_type, p_data, p_min, p_max, format, flags);
    }
    InputText :: (label: *u8, buf: *u8, buf_size: size_t, flags: InputTextFlags = .None, callback: InputTextCallback = null, user_data: *void = null) -> bool #foreign imgui "_ZN5ImGui9InputTextEPKcPcmiPFiP26ImGuiInputTextCallbackDataEPv";
    InputTextMultiline :: (label: *u8, buf: *u8, buf_size: size_t, size: ImVec2 = ImVec2.{0,0}, flags: InputTextFlags = .None, callback: InputTextCallback = null, user_data: *void = null) -> bool {
        InputTextMultiline_internal :: (label: *u8, buf: *u8, buf_size: size_t, size: *ImVec2, flags: InputTextFlags, callback: InputTextCallback, user_data: *void) -> bool #foreign imgui "_ZN5ImGui18InputTextMultilineEPKcPcmRK6ImVec2iPFiP26ImGuiInputTextCallbackDataEPv";
        return InputTextMultiline_internal(label, buf, buf_size, *size, flags, callback, user_data);
    }
    InputTextWithHint :: (label: *u8, hint: *u8, buf: *u8, buf_size: size_t, flags: InputTextFlags = .None, callback: InputTextCallback = null, user_data: *void = null) -> bool #foreign imgui "_ZN5ImGui17InputTextWithHintEPKcS1_PcmiPFiP26ImGuiInputTextCallbackDataEPv";
    InputFloat :: (label: *u8, v: *float, step: float = 0.0, step_fast: float = 0.0, format: *u8 = "%.3f", flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui10InputFloatEPKcPfffS1_i";
    InputFloat2 :: (label: *u8, v: *[2] float, format: *u8 = "%.3f", flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui11InputFloat2EPKcPfS1_i";
    InputFloat3 :: (label: *u8, v: *[3] float, format: *u8 = "%.3f", flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui11InputFloat3EPKcPfS1_i";
    InputFloat4 :: (label: *u8, v: *[4] float, format: *u8 = "%.3f", flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui11InputFloat4EPKcPfS1_i";
    InputInt :: (label: *u8, v: *s32, step: s32 = 1, step_fast: s32 = 100, flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui8InputIntEPKcPiiii";
    InputInt2 :: (label: *u8, v: *[2] s32, flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui9InputInt2EPKcPii";
    InputInt3 :: (label: *u8, v: *[3] s32, flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui9InputInt3EPKcPii";
    InputInt4 :: (label: *u8, v: *[4] s32, flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui9InputInt4EPKcPii";
    InputDouble :: (label: *u8, v: *float64, step: float64 = 0.0, step_fast: float64 = 0.0, format: *u8 = "%.6f", flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui11InputDoubleEPKcPdddS1_i";
    InputScalar :: (label: *u8, data_type: DataType, p_data: *void, p_step: *void = null, p_step_fast: *void = null, format: *u8 = null, flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui11InputScalarEPKciPvPKvS4_S1_i";
    InputScalarN :: (label: *u8, data_type: DataType, p_data: *void, components: s32, p_step: *void = null, p_step_fast: *void = null, format: *u8 = null, flags: InputTextFlags = .None) -> bool #foreign imgui "_ZN5ImGui12InputScalarNEPKciPviPKvS4_S1_i";
    ColorEdit3 :: (label: *u8, col: *[3] float, flags: ColorEditFlags = .None) -> bool #foreign imgui "_ZN5ImGui10ColorEdit3EPKcPfi";
    ColorEdit4 :: (label: *u8, col: *[4] float, flags: ColorEditFlags = .None) -> bool #foreign imgui "_ZN5ImGui10ColorEdit4EPKcPfi";
    ColorPicker3 :: (label: *u8, col: *[3] float, flags: ColorEditFlags = .None) -> bool #foreign imgui "_ZN5ImGui12ColorPicker3EPKcPfi";
    ColorPicker4 :: (label: *u8, col: *[4] float, flags: ColorEditFlags = .None, ref_col: *float = null) -> bool #foreign imgui "_ZN5ImGui12ColorPicker4EPKcPfiPKf";
    ColorButton :: (desc_id: *u8, col: ImVec4, flags: ColorEditFlags = .None, size: ImVec2 = ImVec2.{0,0}) -> bool {
        ColorButton_internal :: (desc_id: *u8, col: *ImVec4, flags: ColorEditFlags, size: ImVec2) -> bool #foreign imgui "_ZN5ImGui11ColorButtonEPKcRK6ImVec4i6ImVec2";
        return ColorButton_internal(desc_id, *col, flags, size);
    }
    SetColorEditOptions :: (flags: ColorEditFlags) -> void #foreign imgui "_ZN5ImGui19SetColorEditOptionsEi";
    TreeNode :: (label: *u8) -> bool #foreign imgui "_ZN5ImGui8TreeNodeEPKc";
    TreeNode :: (str_id: *u8, fmt: *u8, __args: ..Any) -> bool #foreign imgui "_ZN5ImGui8TreeNodeEPKcS1_z";
    TreeNode :: (ptr_id: *void, fmt: *u8, __args: ..Any) -> bool #foreign imgui "_ZN5ImGui8TreeNodeEPKvPKcz";
    /* (jaicc: omitted function with valist)
    TreeNodeV :: (str_id: *u8, fmt: *u8, args: va_list) -> bool #foreign imgui "_ZN5ImGui9TreeNodeVEPKcS1_P13__va_list_tag";
    */

    /* (jaicc: omitted function with valist)
    TreeNodeV :: (ptr_id: *void, fmt: *u8, args: va_list) -> bool #foreign imgui "_ZN5ImGui9TreeNodeVEPKvPKcP13__va_list_tag";
    */

    TreeNodeEx :: (label: *u8, flags: TreeNodeFlags = .None) -> bool #foreign imgui "_ZN5ImGui10TreeNodeExEPKci";
    TreeNodeEx :: (str_id: *u8, flags: TreeNodeFlags, fmt: *u8, __args: ..Any) -> bool #foreign imgui "_ZN5ImGui10TreeNodeExEPKciS1_z";
    TreeNodeEx :: (ptr_id: *void, flags: TreeNodeFlags, fmt: *u8, __args: ..Any) -> bool #foreign imgui "_ZN5ImGui10TreeNodeExEPKviPKcz";
    /* (jaicc: omitted function with valist)
    TreeNodeExV :: (str_id: *u8, flags: TreeNodeFlags, fmt: *u8, args: va_list) -> bool #foreign imgui "_ZN5ImGui11TreeNodeExVEPKciS1_P13__va_list_tag";
    */

    /* (jaicc: omitted function with valist)
    TreeNodeExV :: (ptr_id: *void, flags: TreeNodeFlags, fmt: *u8, args: va_list) -> bool #foreign imgui "_ZN5ImGui11TreeNodeExVEPKviPKcP13__va_list_tag";
    */

    TreePush :: (str_id: *u8) -> void #foreign imgui "_ZN5ImGui8TreePushEPKc";
    TreePush :: (ptr_id: *void = null) -> void #foreign imgui "_ZN5ImGui8TreePushEPKv";
    TreePop :: () -> void #foreign imgui "_ZN5ImGui7TreePopEv";
    GetTreeNodeToLabelSpacing :: () -> float #foreign imgui "_ZN5ImGui25GetTreeNodeToLabelSpacingEv";
    CollapsingHeader :: (label: *u8, flags: TreeNodeFlags = .None) -> bool #foreign imgui "_ZN5ImGui16CollapsingHeaderEPKci";
    CollapsingHeader :: (label: *u8, p_visible: *bool, flags: TreeNodeFlags = .None) -> bool #foreign imgui "_ZN5ImGui16CollapsingHeaderEPKcPbi";
    SetNextItemOpen :: (is_open: bool, cond: Cond = .None) -> void #foreign imgui "_ZN5ImGui15SetNextItemOpenEbi";
    Selectable :: (label: *u8, selected: bool = false, flags: SelectableFlags = .None, size: ImVec2 = ImVec2.{0,0}) -> bool {
        Selectable_internal :: (label: *u8, selected: bool, flags: SelectableFlags, size: *ImVec2) -> bool #foreign imgui "_ZN5ImGui10SelectableEPKcbiRK6ImVec2";
        return Selectable_internal(label, selected, flags, *size);
    }
    Selectable :: (label: *u8, p_selected: *bool, flags: SelectableFlags = .None, size: ImVec2 = ImVec2.{0,0}) -> bool {
        Selectable_internal :: (label: *u8, p_selected: *bool, flags: SelectableFlags, size: *ImVec2) -> bool #foreign imgui "_ZN5ImGui10SelectableEPKcPbiRK6ImVec2";
        return Selectable_internal(label, p_selected, flags, *size);
    }
    BeginListBox :: (label: *u8, size: ImVec2 = ImVec2.{0,0}) -> bool {
        BeginListBox_internal :: (label: *u8, size: *ImVec2) -> bool #foreign imgui "_ZN5ImGui12BeginListBoxEPKcRK6ImVec2";
        return BeginListBox_internal(label, *size);
    }
    EndListBox :: () -> void #foreign imgui "_ZN5ImGui10EndListBoxEv";
    ListBox :: (label: *u8, current_item: *s32, items: **u8, items_count: s32, height_in_items: s32 = -1) -> bool #foreign imgui "_ZN5ImGui7ListBoxEPKcPiPKS1_ii";
    ListBox :: (label: *u8, current_item: *s32, items_getter: #type (a0: *void, a1: s32, a2: **u8) -> bool #c_call, data: *void, items_count: s32, height_in_items: s32 = -1) -> bool #foreign imgui "_ZN5ImGui7ListBoxEPKcPiPFbPviPS1_ES3_ii";
    PlotLines :: (label: *u8, values: *float, values_count: s32, values_offset: s32 = 0, overlay_text: *u8 = null, scale_min: float = 340282346638528859000000000000000000000.0, scale_max: float = 340282346638528859000000000000000000000.0, graph_size: ImVec2 = ImVec2.{0,0}, stride: s32 = 4) -> void #foreign imgui "_ZN5ImGui9PlotLinesEPKcPKfiiS1_ff6ImVec2i";
    PlotLines :: (label: *u8, values_getter: #type (a0: *void, a1: s32) -> float #c_call, data: *void, values_count: s32, values_offset: s32 = 0, overlay_text: *u8 = null, scale_min: float = 340282346638528859000000000000000000000.0, scale_max: float = 340282346638528859000000000000000000000.0, graph_size: ImVec2 = ImVec2.{0,0}) -> void #foreign imgui "_ZN5ImGui9PlotLinesEPKcPFfPviES2_iiS1_ff6ImVec2";
    PlotHistogram :: (label: *u8, values: *float, values_count: s32, values_offset: s32 = 0, overlay_text: *u8 = null, scale_min: float = 340282346638528859000000000000000000000.0, scale_max: float = 340282346638528859000000000000000000000.0, graph_size: ImVec2 = ImVec2.{0,0}, stride: s32 = 4) -> void #foreign imgui "_ZN5ImGui13PlotHistogramEPKcPKfiiS1_ff6ImVec2i";
    PlotHistogram :: (label: *u8, values_getter: #type (a0: *void, a1: s32) -> float #c_call, data: *void, values_count: s32, values_offset: s32 = 0, overlay_text: *u8 = null, scale_min: float = 340282346638528859000000000000000000000.0, scale_max: float = 340282346638528859000000000000000000000.0, graph_size: ImVec2 = ImVec2.{0,0}) -> void #foreign imgui "_ZN5ImGui13PlotHistogramEPKcPFfPviES2_iiS1_ff6ImVec2";
    Value :: (prefix: *u8, b: bool) -> void #foreign imgui "_ZN5ImGui5ValueEPKcb";
    Value :: (prefix: *u8, v: s32) -> void #foreign imgui "_ZN5ImGui5ValueEPKci";
    Value :: (prefix: *u8, v: u32) -> void #foreign imgui "_ZN5ImGui5ValueEPKcj";
    Value :: (prefix: *u8, v: float, float_format: *u8 = null) -> void #foreign imgui "_ZN5ImGui5ValueEPKcfS1_";
    BeginMenuBar :: () -> bool #foreign imgui "_ZN5ImGui12BeginMenuBarEv";
    EndMenuBar :: () -> void #foreign imgui "_ZN5ImGui10EndMenuBarEv";
    BeginMainMenuBar :: () -> bool #foreign imgui "_ZN5ImGui16BeginMainMenuBarEv";
    EndMainMenuBar :: () -> void #foreign imgui "_ZN5ImGui14EndMainMenuBarEv";
    BeginMenu :: (label: *u8, enabled: bool = true) -> bool #foreign imgui "_ZN5ImGui9BeginMenuEPKcb";
    EndMenu :: () -> void #foreign imgui "_ZN5ImGui7EndMenuEv";
    MenuItem :: (label: *u8, shortcut: *u8 = null, selected: bool = false, enabled: bool = true) -> bool #foreign imgui "_ZN5ImGui8MenuItemEPKcS1_bb";
    MenuItem :: (label: *u8, shortcut: *u8, p_selected: *bool, enabled: bool = true) -> bool #foreign imgui "_ZN5ImGui8MenuItemEPKcS1_Pbb";
    BeginTooltip :: () -> void #foreign imgui "_ZN5ImGui12BeginTooltipEv";
    EndTooltip :: () -> void #foreign imgui "_ZN5ImGui10EndTooltipEv";
    SetTooltip :: (fmt: *u8, __args: ..Any) -> void #foreign imgui "_ZN5ImGui10SetTooltipEPKcz";
    /* (jaicc: omitted function with valist)
    SetTooltipV :: (fmt: *u8, args: va_list) -> void #foreign imgui "_ZN5ImGui11SetTooltipVEPKcP13__va_list_tag";
    */

    BeginPopup :: (str_id: *u8, flags: WindowFlags = .None) -> bool #foreign imgui "_ZN5ImGui10BeginPopupEPKci";
    BeginPopupModal :: (name: *u8, p_open: *bool = null, flags: WindowFlags = .None) -> bool #foreign imgui "_ZN5ImGui15BeginPopupModalEPKcPbi";
    EndPopup :: () -> void #foreign imgui "_ZN5ImGui8EndPopupEv";
    OpenPopup :: (str_id: *u8, popup_flags: PopupFlags = .None) -> void #foreign imgui "_ZN5ImGui9OpenPopupEPKci";
    OpenPopup :: (id: ID, popup_flags: PopupFlags = .None) -> void #foreign imgui "_ZN5ImGui9OpenPopupEji";
    OpenPopupOnItemClick :: (str_id: *u8 = null, popup_flags: PopupFlags = .MouseButtonRight) -> void #foreign imgui "_ZN5ImGui20OpenPopupOnItemClickEPKci";
    CloseCurrentPopup :: () -> void #foreign imgui "_ZN5ImGui17CloseCurrentPopupEv";
    BeginPopupContextItem :: (str_id: *u8 = null, popup_flags: PopupFlags = .MouseButtonRight) -> bool #foreign imgui "_ZN5ImGui21BeginPopupContextItemEPKci";
    BeginPopupContextWindow :: (str_id: *u8 = null, popup_flags: PopupFlags = .MouseButtonRight) -> bool #foreign imgui "_ZN5ImGui23BeginPopupContextWindowEPKci";
    BeginPopupContextVoid :: (str_id: *u8 = null, popup_flags: PopupFlags = .MouseButtonRight) -> bool #foreign imgui "_ZN5ImGui21BeginPopupContextVoidEPKci";
    IsPopupOpen :: (str_id: *u8, flags: PopupFlags = .None) -> bool #foreign imgui "_ZN5ImGui11IsPopupOpenEPKci";
    BeginTable :: (str_id: *u8, column: s32, flags: TableFlags = .None, outer_size: ImVec2 = ImVec2.{0.0 ,0.0 }, inner_width: float = 0.0) -> bool {
        BeginTable_internal :: (str_id: *u8, column: s32, flags: TableFlags, outer_size: *ImVec2, inner_width: float) -> bool #foreign imgui "_ZN5ImGui10BeginTableEPKciiRK6ImVec2f";
        return BeginTable_internal(str_id, column, flags, *outer_size, inner_width);
    }
    EndTable :: () -> void #foreign imgui "_ZN5ImGui8EndTableEv";
    TableNextRow :: (row_flags: TableRowFlags = .None, min_row_height: float = 0.0) -> void #foreign imgui "_ZN5ImGui12TableNextRowEif";
    TableNextColumn :: () -> bool #foreign imgui "_ZN5ImGui15TableNextColumnEv";
    TableSetColumnIndex :: (column_n: s32) -> bool #foreign imgui "_ZN5ImGui19TableSetColumnIndexEi";
    TableSetupColumn :: (label: *u8, flags: TableColumnFlags = .None, init_width_or_weight: float = 0.0, user_id: ID) -> void #foreign imgui "_ZN5ImGui16TableSetupColumnEPKcifj";
    TableSetupScrollFreeze :: (cols: s32, rows: s32) -> void #foreign imgui "_ZN5ImGui22TableSetupScrollFreezeEii";
    TableHeadersRow :: () -> void #foreign imgui "_ZN5ImGui15TableHeadersRowEv";
    TableHeader :: (label: *u8) -> void #foreign imgui "_ZN5ImGui11TableHeaderEPKc";
    TableGetSortSpecs :: () -> *TableSortSpecs #foreign imgui "_ZN5ImGui17TableGetSortSpecsEv";
    TableGetColumnCount :: () -> s32 #foreign imgui "_ZN5ImGui19TableGetColumnCountEv";
    TableGetColumnIndex :: () -> s32 #foreign imgui "_ZN5ImGui19TableGetColumnIndexEv";
    TableGetRowIndex :: () -> s32 #foreign imgui "_ZN5ImGui16TableGetRowIndexEv";
    TableGetColumnName :: (column_n: s32 = -1) -> *u8 #foreign imgui "_ZN5ImGui18TableGetColumnNameEi";
    TableGetColumnFlags :: (column_n: s32 = -1) -> TableColumnFlags #foreign imgui "_ZN5ImGui19TableGetColumnFlagsEi";
    TableSetColumnEnabled :: (column_n: s32, v: bool) -> void #foreign imgui "_ZN5ImGui21TableSetColumnEnabledEib";
    TableSetBgColor :: (target: TableBgTarget, color: ImU32, column_n: s32 = -1) -> void #foreign imgui "_ZN5ImGui15TableSetBgColorEiji";
    Columns :: (count: s32 = 1, id: *u8 = null, border: bool = true) -> void #foreign imgui "_ZN5ImGui7ColumnsEiPKcb";
    NextColumn :: () -> void #foreign imgui "_ZN5ImGui10NextColumnEv";
    GetColumnIndex :: () -> s32 #foreign imgui "_ZN5ImGui14GetColumnIndexEv";
    GetColumnWidth :: (column_index: s32 = -1) -> float #foreign imgui "_ZN5ImGui14GetColumnWidthEi";
    SetColumnWidth :: (column_index: s32, width: float) -> void #foreign imgui "_ZN5ImGui14SetColumnWidthEif";
    GetColumnOffset :: (column_index: s32 = -1) -> float #foreign imgui "_ZN5ImGui15GetColumnOffsetEi";
    SetColumnOffset :: (column_index: s32, offset_x: float) -> void #foreign imgui "_ZN5ImGui15SetColumnOffsetEif";
    GetColumnsCount :: () -> s32 #foreign imgui "_ZN5ImGui15GetColumnsCountEv";
    BeginTabBar :: (str_id: *u8, flags: TabBarFlags = .None) -> bool #foreign imgui "_ZN5ImGui11BeginTabBarEPKci";
    EndTabBar :: () -> void #foreign imgui "_ZN5ImGui9EndTabBarEv";
    BeginTabItem :: (label: *u8, p_open: *bool = null, flags: TabItemFlags = .None) -> bool #foreign imgui "_ZN5ImGui12BeginTabItemEPKcPbi";
    EndTabItem :: () -> void #foreign imgui "_ZN5ImGui10EndTabItemEv";
    TabItemButton :: (label: *u8, flags: TabItemFlags = .None) -> bool #foreign imgui "_ZN5ImGui13TabItemButtonEPKci";
    SetTabItemClosed :: (tab_or_docked_window_label: *u8) -> void #foreign imgui "_ZN5ImGui16SetTabItemClosedEPKc";
    DockSpace :: (id: ID, size: ImVec2 = ImVec2.{0,0}, flags: DockNodeFlags = .None, window_class: *WindowClass = null) -> ID {
        DockSpace_internal :: (id: ID, size: *ImVec2, flags: DockNodeFlags, window_class: *WindowClass) -> ID #foreign imgui "_ZN5ImGui9DockSpaceEjRK6ImVec2iPK16ImGuiWindowClass";
        return DockSpace_internal(id, *size, flags, window_class);
    }
    DockSpaceOverViewport :: (viewport: *Viewport = null, flags: DockNodeFlags = .None, window_class: *WindowClass = null) -> ID #foreign imgui "_ZN5ImGui21DockSpaceOverViewportEPK13ImGuiViewportiPK16ImGuiWindowClass";
    SetNextWindowDockID :: (dock_id: ID, cond: Cond = .None) -> void #foreign imgui "_ZN5ImGui19SetNextWindowDockIDEji";
    SetNextWindowClass :: (window_class: *WindowClass) -> void #foreign imgui "_ZN5ImGui18SetNextWindowClassEPK16ImGuiWindowClass";
    GetWindowDockID :: () -> ID #foreign imgui "_ZN5ImGui15GetWindowDockIDEv";
    IsWindowDocked :: () -> bool #foreign imgui "_ZN5ImGui14IsWindowDockedEv";
    LogToTTY :: (auto_open_depth: s32 = -1) -> void #foreign imgui "_ZN5ImGui8LogToTTYEi";
    LogToFile :: (auto_open_depth: s32 = -1, filename: *u8 = null) -> void #foreign imgui "_ZN5ImGui9LogToFileEiPKc";
    LogToClipboard :: (auto_open_depth: s32 = -1) -> void #foreign imgui "_ZN5ImGui14LogToClipboardEi";
    LogFinish :: () -> void #foreign imgui "_ZN5ImGui9LogFinishEv";
    LogButtons :: () -> void #foreign imgui "_ZN5ImGui10LogButtonsEv";
    LogText :: (fmt: *u8, __args: ..Any) -> void #foreign imgui "_ZN5ImGui7LogTextEPKcz";
    /* (jaicc: omitted function with valist)
    LogTextV :: (fmt: *u8, args: va_list) -> void #foreign imgui "_ZN5ImGui8LogTextVEPKcP13__va_list_tag";
    */

    BeginDragDropSource :: (flags: DragDropFlags = .None) -> bool #foreign imgui "_ZN5ImGui19BeginDragDropSourceEi";
    SetDragDropPayload :: (type: *u8, data: *void, sz: size_t, cond: Cond = .None) -> bool #foreign imgui "_ZN5ImGui18SetDragDropPayloadEPKcPKvmi";
    EndDragDropSource :: () -> void #foreign imgui "_ZN5ImGui17EndDragDropSourceEv";
    BeginDragDropTarget :: () -> bool #foreign imgui "_ZN5ImGui19BeginDragDropTargetEv";
    AcceptDragDropPayload :: (type: *u8, flags: DragDropFlags = .None) -> *Payload #foreign imgui "_ZN5ImGui21AcceptDragDropPayloadEPKci";
    EndDragDropTarget :: () -> void #foreign imgui "_ZN5ImGui17EndDragDropTargetEv";
    GetDragDropPayload :: () -> *Payload #foreign imgui "_ZN5ImGui18GetDragDropPayloadEv";
    PushClipRect :: (clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool) {
        PushClipRect_internal :: (clip_rect_min: *ImVec2, clip_rect_max: *ImVec2, intersect_with_current_clip_rect: bool) -> void #foreign imgui "_ZN5ImGui12PushClipRectERK6ImVec2S2_b";
        PushClipRect_internal(*clip_rect_min, *clip_rect_max, intersect_with_current_clip_rect);
    }
    PopClipRect :: () -> void #foreign imgui "_ZN5ImGui11PopClipRectEv";
    SetItemDefaultFocus :: () -> void #foreign imgui "_ZN5ImGui19SetItemDefaultFocusEv";
    SetKeyboardFocusHere :: (offset: s32 = 0) -> void #foreign imgui "_ZN5ImGui20SetKeyboardFocusHereEi";
    IsItemHovered :: (flags: HoveredFlags = .None) -> bool #foreign imgui "_ZN5ImGui13IsItemHoveredEi";
    IsItemActive :: () -> bool #foreign imgui "_ZN5ImGui12IsItemActiveEv";
    IsItemFocused :: () -> bool #foreign imgui "_ZN5ImGui13IsItemFocusedEv";
    IsItemClicked :: (mouse_button: MouseButton = .Left) -> bool #foreign imgui "_ZN5ImGui13IsItemClickedEi";
    IsItemVisible :: () -> bool #foreign imgui "_ZN5ImGui13IsItemVisibleEv";
    IsItemEdited :: () -> bool #foreign imgui "_ZN5ImGui12IsItemEditedEv";
    IsItemActivated :: () -> bool #foreign imgui "_ZN5ImGui15IsItemActivatedEv";
    IsItemDeactivated :: () -> bool #foreign imgui "_ZN5ImGui17IsItemDeactivatedEv";
    IsItemDeactivatedAfterEdit :: () -> bool #foreign imgui "_ZN5ImGui26IsItemDeactivatedAfterEditEv";
    IsItemToggledOpen :: () -> bool #foreign imgui "_ZN5ImGui17IsItemToggledOpenEv";
    IsAnyItemHovered :: () -> bool #foreign imgui "_ZN5ImGui16IsAnyItemHoveredEv";
    IsAnyItemActive :: () -> bool #foreign imgui "_ZN5ImGui15IsAnyItemActiveEv";
    IsAnyItemFocused :: () -> bool #foreign imgui "_ZN5ImGui16IsAnyItemFocusedEv";
    GetItemRectMin :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui14GetItemRectMinEv";
    GetItemRectMax :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui14GetItemRectMaxEv";
    GetItemRectSize :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui15GetItemRectSizeEv";
    SetItemAllowOverlap :: () -> void #foreign imgui "_ZN5ImGui19SetItemAllowOverlapEv";
    GetMainViewport :: () -> *Viewport #foreign imgui "_ZN5ImGui15GetMainViewportEv";
    IsRectVisible :: (size: ImVec2) -> bool {
        IsRectVisible_internal :: (size: *ImVec2) -> bool #foreign imgui "_ZN5ImGui13IsRectVisibleERK6ImVec2";
        return IsRectVisible_internal(*size);
    }
    IsRectVisible :: (rect_min: ImVec2, rect_max: ImVec2) -> bool {
        IsRectVisible_internal :: (rect_min: *ImVec2, rect_max: *ImVec2) -> bool #foreign imgui "_ZN5ImGui13IsRectVisibleERK6ImVec2S2_";
        return IsRectVisible_internal(*rect_min, *rect_max);
    }
    GetTime :: () -> float64 #foreign imgui "_ZN5ImGui7GetTimeEv";
    GetFrameCount :: () -> s32 #foreign imgui "_ZN5ImGui13GetFrameCountEv";
    GetBackgroundDrawList :: () -> *ImDrawList #foreign imgui "_ZN5ImGui21GetBackgroundDrawListEv";
    GetForegroundDrawList :: () -> *ImDrawList #foreign imgui "_ZN5ImGui21GetForegroundDrawListEv";
    GetBackgroundDrawList :: (viewport: *Viewport) -> *ImDrawList #foreign imgui "_ZN5ImGui21GetBackgroundDrawListEP13ImGuiViewport";
    GetForegroundDrawList :: (viewport: *Viewport) -> *ImDrawList #foreign imgui "_ZN5ImGui21GetForegroundDrawListEP13ImGuiViewport";
    GetDrawListSharedData :: () -> *ImDrawListSharedData #foreign imgui "_ZN5ImGui21GetDrawListSharedDataEv";
    GetStyleColorName :: (idx: Col) -> *u8 #foreign imgui "_ZN5ImGui17GetStyleColorNameEi";
    SetStateStorage :: (storage: *Storage) -> void #foreign imgui "_ZN5ImGui15SetStateStorageEP12ImGuiStorage";
    GetStateStorage :: () -> *Storage #foreign imgui "_ZN5ImGui15GetStateStorageEv";
    CalcListClipping :: (items_count: s32, items_height: float, out_items_display_start: *s32, out_items_display_end: *s32) -> void #foreign imgui "_ZN5ImGui16CalcListClippingEifPiS0_";
    BeginChildFrame :: (id: ID, size: ImVec2, flags: WindowFlags = .None) -> bool {
        BeginChildFrame_internal :: (id: ID, size: *ImVec2, flags: WindowFlags) -> bool #foreign imgui "_ZN5ImGui15BeginChildFrameEjRK6ImVec2i";
        return BeginChildFrame_internal(id, *size, flags);
    }
    EndChildFrame :: () -> void #foreign imgui "_ZN5ImGui13EndChildFrameEv";
    CalcTextSize :: (text: string, hide_text_after_double_hash: bool = false, wrap_width: float = -1.0) -> ImVec2 {
        CalcTextSize_internal :: (text: *u8, text_end: *u8, hide_text_after_double_hash: bool, wrap_width: float) -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui12CalcTextSizeEPKcS1_bf";
        return CalcTextSize_internal(text.data, text.data + text.count, hide_text_after_double_hash, wrap_width);
    }
    ColorConvertU32ToFloat4 :: (in: ImU32) -> ImVec4 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui23ColorConvertU32ToFloat4Ej";
    ColorConvertFloat4ToU32 :: (in: ImVec4) -> ImU32 {
        ColorConvertFloat4ToU32_internal :: (in: *ImVec4) -> ImU32 #foreign imgui "_ZN5ImGui23ColorConvertFloat4ToU32ERK6ImVec4";
        return ColorConvertFloat4ToU32_internal(*in);
    }
    ColorConvertRGBtoHSV :: (r: float, g: float, b: float, out_h: *float, out_s: *float, out_v: *float) -> void #foreign imgui "_ZN5ImGui20ColorConvertRGBtoHSVEfffRfS0_S0_";
    ColorConvertHSVtoRGB :: (h: float, s: float, v: float, out_r: *float, out_g: *float, out_b: *float) -> void #foreign imgui "_ZN5ImGui20ColorConvertHSVtoRGBEfffRfS0_S0_";
    GetKeyIndex :: (imgui_key: Key) -> s32 #foreign imgui "_ZN5ImGui11GetKeyIndexEi";
    IsKeyDown :: (user_key_index: s32) -> bool #foreign imgui "_ZN5ImGui9IsKeyDownEi";
    IsKeyPressed :: (user_key_index: s32, repeat: bool = true) -> bool #foreign imgui "_ZN5ImGui12IsKeyPressedEib";
    IsKeyReleased :: (user_key_index: s32) -> bool #foreign imgui "_ZN5ImGui13IsKeyReleasedEi";
    GetKeyPressedAmount :: (key_index: s32, repeat_delay: float, rate: float) -> s32 #foreign imgui "_ZN5ImGui19GetKeyPressedAmountEiff";
    CaptureKeyboardFromApp :: (want_capture_keyboard_value: bool = true) -> void #foreign imgui "_ZN5ImGui22CaptureKeyboardFromAppEb";
    IsMouseDown :: (button: MouseButton) -> bool #foreign imgui "_ZN5ImGui11IsMouseDownEi";
    IsMouseClicked :: (button: MouseButton, repeat: bool = false) -> bool #foreign imgui "_ZN5ImGui14IsMouseClickedEib";
    IsMouseReleased :: (button: MouseButton) -> bool #foreign imgui "_ZN5ImGui15IsMouseReleasedEi";
    IsMouseDoubleClicked :: (button: MouseButton) -> bool #foreign imgui "_ZN5ImGui20IsMouseDoubleClickedEi";
    IsMouseHoveringRect :: (r_min: ImVec2, r_max: ImVec2, clip: bool = true) -> bool {
        IsMouseHoveringRect_internal :: (r_min: *ImVec2, r_max: *ImVec2, clip: bool) -> bool #foreign imgui "_ZN5ImGui19IsMouseHoveringRectERK6ImVec2S2_b";
        return IsMouseHoveringRect_internal(*r_min, *r_max, clip);
    }
    IsMousePosValid :: (mouse_pos: *ImVec2 = null) -> bool #foreign imgui "_ZN5ImGui15IsMousePosValidEPK6ImVec2";
    IsAnyMouseDown :: () -> bool #foreign imgui "_ZN5ImGui14IsAnyMouseDownEv";
    GetMousePos :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui11GetMousePosEv";
    GetMousePosOnOpeningCurrentPopup :: () -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui32GetMousePosOnOpeningCurrentPopupEv";
    IsMouseDragging :: (button: MouseButton, lock_threshold: float = -1.0) -> bool #foreign imgui "_ZN5ImGui15IsMouseDraggingEif";
    GetMouseDragDelta :: (button: MouseButton = .Left, lock_threshold: float = -1.0) -> ImVec2 #cpp_return_type_is_non_pod #foreign imgui "_ZN5ImGui17GetMouseDragDeltaEif";
    ResetMouseDragDelta :: (button: MouseButton = .Left) -> void #foreign imgui "_ZN5ImGui19ResetMouseDragDeltaEi";
    GetMouseCursor :: () -> MouseCursor #foreign imgui "_ZN5ImGui14GetMouseCursorEv";
    SetMouseCursor :: (cursor_type: MouseCursor) -> void #foreign imgui "_ZN5ImGui14SetMouseCursorEi";
    CaptureMouseFromApp :: (want_capture_mouse_value: bool = true) -> void #foreign imgui "_ZN5ImGui19CaptureMouseFromAppEb";
    GetClipboardText :: () -> *u8 #foreign imgui "_ZN5ImGui16GetClipboardTextEv";
    SetClipboardText :: (text: *u8) -> void #foreign imgui "_ZN5ImGui16SetClipboardTextEPKc";
    LoadIniSettingsFromDisk :: (ini_filename: *u8) -> void #foreign imgui "_ZN5ImGui23LoadIniSettingsFromDiskEPKc";
    LoadIniSettingsFromMemory :: (ini_data: *u8, ini_size: size_t) -> void #foreign imgui "_ZN5ImGui25LoadIniSettingsFromMemoryEPKcm";
    SaveIniSettingsToDisk :: (ini_filename: *u8) -> void #foreign imgui "_ZN5ImGui21SaveIniSettingsToDiskEPKc";
    SaveIniSettingsToMemory :: (out_ini_size: *size_t = null) -> *u8 #foreign imgui "_ZN5ImGui23SaveIniSettingsToMemoryEPm";
    DebugCheckVersionAndDataLayout :: (version_str: *u8, sz_io: size_t, sz_style: size_t, sz_vec2: size_t, sz_vec4: size_t, sz_drawvert: size_t, sz_drawidx: size_t) -> bool #foreign imgui "_ZN5ImGui30DebugCheckVersionAndDataLayoutEPKcmmmmmm";
    SetAllocatorFunctions :: (alloc_func: MemAllocFunc, free_func: MemFreeFunc, user_data: *void = null) -> void #foreign imgui "_ZN5ImGui21SetAllocatorFunctionsEPFPvmS0_EPFvS0_S0_ES0_";
    GetAllocatorFunctions :: (p_alloc_func: *MemAllocFunc, p_free_func: *MemFreeFunc, p_user_data: **void) -> void #foreign imgui "_ZN5ImGui21GetAllocatorFunctionsEPPFPvmS0_EPPFvS0_S0_EPS0_";
    MemAlloc :: (size: size_t) -> *void #foreign imgui "_ZN5ImGui8MemAllocEm";
    MemFree :: (ptr: *void) -> void #foreign imgui "_ZN5ImGui7MemFreeEPv";
    GetPlatformIO :: () -> *PlatformIO #foreign imgui "_ZN5ImGui13GetPlatformIOEv";
    UpdatePlatformWindows :: () -> void #foreign imgui "_ZN5ImGui21UpdatePlatformWindowsEv";
    RenderPlatformWindowsDefault :: (platform_render_arg: *void = null, renderer_render_arg: *void = null) -> void #foreign imgui "_ZN5ImGui28RenderPlatformWindowsDefaultEPvS0_";
    DestroyPlatformWindows :: () -> void #foreign imgui "_ZN5ImGui22DestroyPlatformWindowsEv";
    FindViewportByID :: (id: ID) -> *Viewport #foreign imgui "_ZN5ImGui16FindViewportByIDEj";
    FindViewportByPlatformHandle :: (platform_handle: *void) -> *Viewport #foreign imgui "_ZN5ImGui28FindViewportByPlatformHandleEPv";
// }

WindowFlags :: enum u32 {
    None :: 0;
    NoTitleBar :: 1;
    NoResize :: 2;
    NoMove :: 4;
    NoScrollbar :: 8;
    NoScrollWithMouse :: 16;
    NoCollapse :: 32;
    AlwaysAutoResize :: 64;
    NoBackground :: 128;
    NoSavedSettings :: 256;
    NoMouseInputs :: 512;
    MenuBar :: 1024;
    HorizontalScrollbar :: 2048;
    NoFocusOnAppearing :: 4096;
    NoBringToFrontOnFocus :: 8192;
    AlwaysVerticalScrollbar :: 16384;
    AlwaysHorizontalScrollbar :: 32768;
    AlwaysUseWindowPadding :: 65536;
    NoNavInputs :: 262144;
    NoNavFocus :: 524288;
    UnsavedDocument :: 1048576;
    NoDocking :: 2097152;
    NoNav :: 786432;
    NoDecoration :: 43;
    NoInputs :: 786944;
    NavFlattened :: 8388608;
    ChildWindow :: 16777216;
    Tooltip :: 33554432;
    Popup :: 67108864;
    Modal :: 134217728;
    ChildMenu :: 268435456;
    DockNodeHost :: 536870912;
}

InputTextFlags :: enum u32 {
    None :: 0;
    CharsDecimal :: 1;
    CharsHexadecimal :: 2;
    CharsUppercase :: 4;
    CharsNoBlank :: 8;
    AutoSelectAll :: 16;
    EnterReturnsTrue :: 32;
    CallbackCompletion :: 64;
    CallbackHistory :: 128;
    CallbackAlways :: 256;
    CallbackCharFilter :: 512;
    AllowTabInput :: 1024;
    CtrlEnterForNewLine :: 2048;
    NoHorizontalScroll :: 4096;
    AlwaysOverwrite :: 8192;
    ReadOnly :: 16384;
    Password :: 32768;
    NoUndoRedo :: 65536;
    CharsScientific :: 131072;
    CallbackResize :: 262144;
    CallbackEdit :: 524288;
}

TreeNodeFlags :: enum u32 {
    None :: 0;
    Selected :: 1;
    Framed :: 2;
    AllowItemOverlap :: 4;
    NoTreePushOnOpen :: 8;
    NoAutoOpenOnLog :: 16;
    DefaultOpen :: 32;
    OpenOnDoubleClick :: 64;
    OpenOnArrow :: 128;
    Leaf :: 256;
    Bullet :: 512;
    FramePadding :: 1024;
    SpanAvailWidth :: 2048;
    SpanFullWidth :: 4096;
    NavLeftJumpsBackHere :: 8192;
    CollapsingHeader :: 26;
}

PopupFlags :: enum u32 {
    None :: 0;
    MouseButtonLeft :: 0;
    MouseButtonRight :: 1;
    MouseButtonMiddle :: 2;
    MouseButtonMask_ :: 31;
    MouseButtonDefault_ :: 1;
    NoOpenOverExistingPopup :: 32;
    NoOpenOverItems :: 64;
    AnyPopupId :: 128;
    AnyPopupLevel :: 256;
    AnyPopup :: 384;
}

SelectableFlags :: enum u32 {
    None :: 0;
    DontClosePopups :: 1;
    SpanAllColumns :: 2;
    AllowDoubleClick :: 4;
    Disabled :: 8;
    AllowItemOverlap :: 16;
}

ComboFlags :: enum u32 {
    None :: 0;
    PopupAlignLeft :: 1;
    HeightSmall :: 2;
    HeightRegular :: 4;
    HeightLarge :: 8;
    HeightLargest :: 16;
    NoArrowButton :: 32;
    NoPreview :: 64;
    HeightMask_ :: 30;
}

TabBarFlags :: enum u32 {
    None :: 0;
    Reorderable :: 1;
    AutoSelectNewTabs :: 2;
    TabListPopupButton :: 4;
    NoCloseWithMiddleMouseButton :: 8;
    NoTabListScrollingButtons :: 16;
    NoTooltip :: 32;
    FittingPolicyResizeDown :: 64;
    FittingPolicyScroll :: 128;
    FittingPolicyMask_ :: 192;
    FittingPolicyDefault_ :: 64;
}

TabItemFlags :: enum u32 {
    None :: 0;
    UnsavedDocument :: 1;
    SetSelected :: 2;
    NoCloseWithMiddleMouseButton :: 4;
    NoPushId :: 8;
    NoTooltip :: 16;
    NoReorder :: 32;
    Leading :: 64;
    Trailing :: 128;
}

TableFlags :: enum u32 {
    None :: 0;
    Resizable :: 1;
    Reorderable :: 2;
    Hideable :: 4;
    Sortable :: 8;
    NoSavedSettings :: 16;
    ContextMenuInBody :: 32;
    RowBg :: 64;
    BordersInnerH :: 128;
    BordersOuterH :: 256;
    BordersInnerV :: 512;
    BordersOuterV :: 1024;
    BordersH :: 384;
    BordersV :: 1536;
    BordersInner :: 640;
    BordersOuter :: 1280;
    Borders :: 1920;
    NoBordersInBody :: 2048;
    NoBordersInBodyUntilResize :: 4096;
    SizingFixedFit :: 8192;
    SizingFixedSame :: 16384;
    SizingStretchProp :: 24576;
    SizingStretchSame :: 32768;
    NoHostExtendX :: 65536;
    NoHostExtendY :: 131072;
    NoKeepColumnsVisible :: 262144;
    PreciseWidths :: 524288;
    NoClip :: 1048576;
    PadOuterX :: 2097152;
    NoPadOuterX :: 4194304;
    NoPadInnerX :: 8388608;
    ScrollX :: 16777216;
    ScrollY :: 33554432;
    SortMulti :: 67108864;
    SortTristate :: 134217728;
    SizingMask_ :: 57344;
}

TableColumnFlags :: enum u32 {
    None :: 0;
    Disabled :: 1;
    DefaultHide :: 2;
    DefaultSort :: 4;
    WidthStretch :: 8;
    WidthFixed :: 16;
    NoResize :: 32;
    NoReorder :: 64;
    NoHide :: 128;
    NoClip :: 256;
    NoSort :: 512;
    NoSortAscending :: 1024;
    NoSortDescending :: 2048;
    NoHeaderLabel :: 4096;
    NoHeaderWidth :: 8192;
    PreferSortAscending :: 16384;
    PreferSortDescending :: 32768;
    IndentEnable :: 65536;
    IndentDisable :: 131072;
    IsEnabled :: 16777216;
    IsVisible :: 33554432;
    IsSorted :: 67108864;
    IsHovered :: 134217728;
    WidthMask_ :: 24;
    IndentMask_ :: 196608;
    StatusMask_ :: 251658240;
    NoDirectResize_ :: 1073741824;
}

TableRowFlags :: enum u32 {
    None :: 0;
    Headers :: 1;
}

TableBgTarget :: enum u32 {
    None :: 0;
    RowBg0 :: 1;
    RowBg1 :: 2;
    CellBg :: 3;
}

FocusedFlags :: enum u32 {
    None :: 0;
    ChildWindows :: 1;
    RootWindow :: 2;
    AnyWindow :: 4;
    RootAndChildWindows :: 3;
}

HoveredFlags :: enum u32 {
    None :: 0;
    ChildWindows :: 1;
    RootWindow :: 2;
    AnyWindow :: 4;
    AllowWhenBlockedByPopup :: 8;
    AllowWhenBlockedByActiveItem :: 32;
    AllowWhenOverlapped :: 64;
    AllowWhenDisabled :: 128;
    RectOnly :: 104;
    RootAndChildWindows :: 3;
}

DockNodeFlags :: enum u32 {
    None :: 0;
    KeepAliveOnly :: 1;
    NoDockingInCentralNode :: 4;
    PassthruCentralNode :: 8;
    NoSplit :: 16;
    NoResize :: 32;
    AutoHideTabBar :: 64;
}

DragDropFlags :: enum u32 {
    None :: 0;
    SourceNoPreviewTooltip :: 1;
    SourceNoDisableHover :: 2;
    SourceNoHoldToOpenOthers :: 4;
    SourceAllowNullID :: 8;
    SourceExtern :: 16;
    SourceAutoExpirePayload :: 32;
    AcceptBeforeDelivery :: 1024;
    AcceptNoDrawDefaultRect :: 2048;
    AcceptNoPreviewTooltip :: 4096;
    AcceptPeekOnly :: 3072;
}

DataType :: enum u32 {
    S8 :: 0;
    U8 :: 1;
    S16 :: 2;
    U16 :: 3;
    S32 :: 4;
    U32 :: 5;
    S64 :: 6;
    U64 :: 7;
    Float :: 8;
    Double :: 9;
    COUNT :: 10;
}

Dir :: enum s32 {
    None :: -1;
    Left :: 0;
    Right :: 1;
    Up :: 2;
    Down :: 3;
    COUNT :: 4;
}

SortDirection :: enum u32 {
    None :: 0;
    Ascending :: 1;
    Descending :: 2;
}

Key :: enum u32 {
    Tab :: 0;
    LeftArrow :: 1;
    RightArrow :: 2;
    UpArrow :: 3;
    DownArrow :: 4;
    PageUp :: 5;
    PageDown :: 6;
    Home :: 7;
    End :: 8;
    Insert :: 9;
    Delete :: 10;
    Backspace :: 11;
    Space :: 12;
    Enter :: 13;
    Escape :: 14;
    KeyPadEnter :: 15;
    A :: 16;
    C :: 17;
    V :: 18;
    X :: 19;
    Y :: 20;
    Z :: 21;
    COUNT :: 22;
}

KeyModFlags :: enum u32 {
    None :: 0;
    Ctrl :: 1;
    Shift :: 2;
    Alt :: 4;
    Super :: 8;
}

NavInput_ :: enum u32 {
    Activate :: 0;
    Cancel :: 1;
    Input :: 2;
    Menu :: 3;
    DpadLeft :: 4;
    DpadRight :: 5;
    DpadUp :: 6;
    DpadDown :: 7;
    LStickLeft :: 8;
    LStickRight :: 9;
    LStickUp :: 10;
    LStickDown :: 11;
    FocusPrev :: 12;
    FocusNext :: 13;
    TweakSlow :: 14;
    TweakFast :: 15;
    KeyMenu_ :: 16;
    KeyLeft_ :: 17;
    KeyRight_ :: 18;
    KeyUp_ :: 19;
    KeyDown_ :: 20;
    COUNT :: 21;
    InternalStart_ :: 16;
}

ConfigFlags :: enum u32 {
    None :: 0;
    NavEnableKeyboard :: 1;
    NavEnableGamepad :: 2;
    NavEnableSetMousePos :: 4;
    NavNoCaptureKeyboard :: 8;
    NoMouse :: 16;
    NoMouseCursorChange :: 32;
    DockingEnable :: 64;
    ViewportsEnable :: 1024;
    DpiEnableScaleViewports :: 16384;
    DpiEnableScaleFonts :: 32768;
    IsSRGB :: 1048576;
    IsTouchScreen :: 2097152;
}

BackendFlags :: enum u32 {
    None :: 0;
    HasGamepad :: 1;
    HasMouseCursors :: 2;
    HasSetMousePos :: 4;
    RendererHasVtxOffset :: 8;
    PlatformHasViewports :: 1024;
    HasMouseHoveredViewport :: 2048;
    RendererHasViewports :: 4096;
}

Col :: enum u32 {
    Text :: 0;
    TextDisabled :: 1;
    WindowBg :: 2;
    ChildBg :: 3;
    PopupBg :: 4;
    Border :: 5;
    BorderShadow :: 6;
    FrameBg :: 7;
    FrameBgHovered :: 8;
    FrameBgActive :: 9;
    TitleBg :: 10;
    TitleBgActive :: 11;
    TitleBgCollapsed :: 12;
    MenuBarBg :: 13;
    ScrollbarBg :: 14;
    ScrollbarGrab :: 15;
    ScrollbarGrabHovered :: 16;
    ScrollbarGrabActive :: 17;
    CheckMark :: 18;
    SliderGrab :: 19;
    SliderGrabActive :: 20;
    Button :: 21;
    ButtonHovered :: 22;
    ButtonActive :: 23;
    Header :: 24;
    HeaderHovered :: 25;
    HeaderActive :: 26;
    Separator :: 27;
    SeparatorHovered :: 28;
    SeparatorActive :: 29;
    ResizeGrip :: 30;
    ResizeGripHovered :: 31;
    ResizeGripActive :: 32;
    Tab :: 33;
    TabHovered :: 34;
    TabActive :: 35;
    TabUnfocused :: 36;
    TabUnfocusedActive :: 37;
    DockingPreview :: 38;
    DockingEmptyBg :: 39;
    PlotLines :: 40;
    PlotLinesHovered :: 41;
    PlotHistogram :: 42;
    PlotHistogramHovered :: 43;
    TableHeaderBg :: 44;
    TableBorderStrong :: 45;
    TableBorderLight :: 46;
    TableRowBg :: 47;
    TableRowBgAlt :: 48;
    TextSelectedBg :: 49;
    DragDropTarget :: 50;
    NavHighlight :: 51;
    NavWindowingHighlight :: 52;
    NavWindowingDimBg :: 53;
    ModalWindowDimBg :: 54;
    COUNT :: 55;
}

StyleVar :: enum u32 {
    Alpha :: 0;
    WindowPadding :: 1;
    WindowRounding :: 2;
    WindowBorderSize :: 3;
    WindowMinSize :: 4;
    WindowTitleAlign :: 5;
    ChildRounding :: 6;
    ChildBorderSize :: 7;
    PopupRounding :: 8;
    PopupBorderSize :: 9;
    FramePadding :: 10;
    FrameRounding :: 11;
    FrameBorderSize :: 12;
    ItemSpacing :: 13;
    ItemInnerSpacing :: 14;
    IndentSpacing :: 15;
    CellPadding :: 16;
    ScrollbarSize :: 17;
    ScrollbarRounding :: 18;
    GrabMinSize :: 19;
    GrabRounding :: 20;
    TabRounding :: 21;
    ButtonTextAlign :: 22;
    SelectableTextAlign :: 23;
    COUNT :: 24;
}

ButtonFlags :: enum u32 {
    None :: 0;
    MouseButtonLeft :: 1;
    MouseButtonRight :: 2;
    MouseButtonMiddle :: 4;
    MouseButtonMask_ :: 7;
    MouseButtonDefault_ :: 1;
}

ColorEditFlags :: enum u32 {
    None :: 0;
    NoAlpha :: 2;
    NoPicker :: 4;
    NoOptions :: 8;
    NoSmallPreview :: 16;
    NoInputs :: 32;
    NoTooltip :: 64;
    NoLabel :: 128;
    NoSidePreview :: 256;
    NoDragDrop :: 512;
    NoBorder :: 1024;
    AlphaBar :: 65536;
    AlphaPreview :: 131072;
    AlphaPreviewHalf :: 262144;
    HDR :: 524288;
    DisplayRGB :: 1048576;
    DisplayHSV :: 2097152;
    DisplayHex :: 4194304;
    Uint8 :: 8388608;
    Float :: 16777216;
    PickerHueBar :: 33554432;
    PickerHueWheel :: 67108864;
    InputRGB :: 134217728;
    InputHSV :: 268435456;
    OptionsDefault :: 177209344;
    DisplayMask :: 7340032;
    DataTypeMask :: 25165824;
    PickerMask :: 100663296;
    InputMask :: 402653184;
}

SliderFlags :: enum u32 {
    None :: 0;
    AlwaysClamp :: 16;
    Logarithmic :: 32;
    NoRoundToFormat :: 64;
    NoInput :: 128;
    InvalidMask_ :: 1879048207;
}

MouseButton :: enum u32 {
    Left :: 0;
    Right :: 1;
    Middle :: 2;
    COUNT :: 5;
}

MouseCursor :: enum s32 {
    None :: -1;
    Arrow :: 0;
    TextInput :: 1;
    ResizeAll :: 2;
    ResizeNS :: 3;
    ResizeEW :: 4;
    ResizeNESW :: 5;
    ResizeNWSE :: 6;
    Hand :: 7;
    NotAllowed :: 8;
    COUNT :: 9;
}

Cond :: enum u32 {
    None :: 0;
    Always :: 1;
    Once :: 2;
    FirstUseEver :: 4;
    Appearing :: 8;
}

ImNewWrapper :: struct {
__empty_struct_padding: u8; // C++ makes empty structs have length 1
}
// #run check_size(ImNewWrapper, 1);

/* (jaicc: omitted inline function)
operator_new :: (unk0: size_t, unk1: ImNewWrapper, ptr: *void) -> *void #c_call {
}
*/


/* (jaicc: omitted inline function)
operator_delete :: (unk0: *void, unk1: ImNewWrapper, unk2: *void) -> void #c_call {
}
*/


ImVector :: struct(T: Type) {
    Size: s32;
    Capacity: s32;
    Data: *T;
    value_type :: T;
    iterator :: *value_type;
    const_iterator :: *value_type;
}

Style :: struct {
    Alpha: float;
    WindowPadding: ImVec2;
    WindowRounding: float;
    WindowBorderSize: float;
    WindowMinSize: ImVec2;
    WindowTitleAlign: ImVec2;
    WindowMenuButtonPosition: Dir;
    ChildRounding: float;
    ChildBorderSize: float;
    PopupRounding: float;
    PopupBorderSize: float;
    FramePadding: ImVec2;
    FrameRounding: float;
    FrameBorderSize: float;
    ItemSpacing: ImVec2;
    ItemInnerSpacing: ImVec2;
    CellPadding: ImVec2;
    TouchExtraPadding: ImVec2;
    IndentSpacing: float;
    ColumnsMinSpacing: float;
    ScrollbarSize: float;
    ScrollbarRounding: float;
    GrabMinSize: float;
    GrabRounding: float;
    LogSliderDeadzone: float;
    TabRounding: float;
    TabBorderSize: float;
    TabMinWidthForCloseButton: float;
    ColorButtonPosition: Dir;
    ButtonTextAlign: ImVec2;
    SelectableTextAlign: ImVec2;
    DisplayWindowPadding: ImVec2;
    DisplaySafeAreaPadding: ImVec2;
    MouseCursorScale: float;
    AntiAliasedLines: bool;
    AntiAliasedLinesUseTex: bool;
    AntiAliasedFill: bool;
    CurveTessellationTol: float;
    CircleTessellationMaxError: float;
    Colors: [55] ImVec4;
    ScaleAllSizes :: (this: *Style, scale_factor: float) -> void #cpp_method #foreign imgui "_ZN10ImGuiStyle13ScaleAllSizesEf";
}
// #run check_size(Style, 1076);

IO :: struct {
    ConfigFlags_: ConfigFlags;
    BackendFlags_: BackendFlags;
    DisplaySize: ImVec2;
    DeltaTime: float;
    IniSavingRate: float;
    IniFilename: *u8;
    LogFilename: *u8;
    MouseDoubleClickTime: float;
    MouseDoubleClickMaxDist: float;
    MouseDragThreshold: float;
    KeyMap: [22] s32;
    KeyRepeatDelay: float;
    KeyRepeatRate: float;
    UserData: *void;
    Fonts: *ImFontAtlas;
    FontGlobalScale: float;
    FontAllowUserScaling: bool;
    FontDefault: *ImFont;
    DisplayFramebufferScale: ImVec2;
    ConfigDockingNoSplit: bool;
    ConfigDockingAlwaysTabBar: bool;
    ConfigDockingTransparentPayload: bool;
    ConfigViewportsNoAutoMerge: bool;
    ConfigViewportsNoTaskBarIcon: bool;
    ConfigViewportsNoDecoration: bool;
    ConfigViewportsNoDefaultParent: bool;
    MouseDrawCursor: bool;
    ConfigMacOSXBehaviors: bool;
    ConfigInputTextCursorBlink: bool;
    ConfigDragClickToInputText: bool;
    ConfigWindowsResizeFromEdges: bool;
    ConfigWindowsMoveFromTitleBarOnly: bool;
    ConfigMemoryCompactTimer: float;
    BackendPlatformName: *u8;
    BackendRendererName: *u8;
    BackendPlatformUserData: *void;
    BackendRendererUserData: *void;
    BackendLanguageUserData: *void;
    GetClipboardTextFn: #type (a0: *void) -> *u8 #c_call;
    SetClipboardTextFn: #type (a0: *void, a1: *u8) -> void #c_call;
    ClipboardUserData: *void;
    MousePos: ImVec2;
    MouseDown: [5] bool;
    MouseWheel: float;
    MouseWheelH: float;
    MouseHoveredViewport: ID;
    KeyCtrl: bool;
    KeyShift: bool;
    KeyAlt: bool;
    KeySuper: bool;
    KeysDown: [512] bool;
    NavInputs: [21] float;
    AddInputCharacter :: (this: *IO, c: u32) -> void #cpp_method #foreign imgui "_ZN7ImGuiIO17AddInputCharacterEj";
    AddInputCharacterUTF16 :: (this: *IO, c: ImWchar16) -> void #cpp_method #foreign imgui "_ZN7ImGuiIO22AddInputCharacterUTF16Et";
    AddInputCharactersUTF8 :: (this: *IO, str: *u8) -> void #cpp_method #foreign imgui "_ZN7ImGuiIO22AddInputCharactersUTF8EPKc";
    ClearInputCharacters :: (this: *IO) -> void #cpp_method #foreign imgui "_ZN7ImGuiIO20ClearInputCharactersEv";
    WantCaptureMouse: bool;
    WantCaptureKeyboard: bool;
    WantTextInput: bool;
    WantSetMousePos: bool;
    WantSaveIniSettings: bool;
    NavActive: bool;
    NavVisible: bool;
    Framerate: float;
    MetricsRenderVertices: s32;
    MetricsRenderIndices: s32;
    MetricsRenderWindows: s32;
    MetricsActiveWindows: s32;
    MetricsActiveAllocations: s32;
    MouseDelta: ImVec2;
    KeyMods: KeyModFlags;
    MousePosPrev: ImVec2;
    MouseClickedPos: [5] ImVec2;
    MouseClickedTime: [5] float64;
    MouseClicked: [5] bool;
    MouseDoubleClicked: [5] bool;
    MouseReleased: [5] bool;
    MouseDownOwned: [5] bool;
    MouseDownWasDoubleClick: [5] bool;
    MouseDownDuration: [5] float;
    MouseDownDurationPrev: [5] float;
    MouseDragMaxDistanceAbs: [5] ImVec2;
    MouseDragMaxDistanceSqr: [5] float;
    KeysDownDuration: [512] float;
    KeysDownDurationPrev: [512] float;
    NavInputsDownDuration: [21] float;
    NavInputsDownDurationPrev: [21] float;
    PenPressure: float;
    InputQueueSurrogate: ImWchar16;
    InputQueueCharacters: ImVector(u16);
}
// #run check_size(IO, 5456);

InputTextCallbackData :: struct {
    EventFlag: InputTextFlags;
    Flags: InputTextFlags;
    UserData: *void;
    EventChar: ImWchar;
    EventKey: Key;
    Buf: *u8;
    BufTextLen: s32;
    BufSize: s32;
    BufDirty: bool;
    CursorPos: s32;
    SelectionStart: s32;
    SelectionEnd: s32;
    DeleteChars :: (this: *InputTextCallbackData, pos: s32, bytes_count: s32) -> void #cpp_method #foreign imgui "_ZN26ImGuiInputTextCallbackData11DeleteCharsEii";
    InsertChars :: (this: *InputTextCallbackData, pos: s32, text: string) {
        InsertChars_internal :: (this: *InputTextCallbackData, pos: s32, text: *u8, text_end: *u8) -> void #cpp_method #foreign imgui "_ZN26ImGuiInputTextCallbackData11InsertCharsEiPKcS1_";
        InsertChars_internal(this, pos, text.data, text.data + text.count);
    }
    /* (jaicc: omitted inline function)
    SelectAll :: (this: *InputTextCallbackData) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    ClearSelection :: (this: *InputTextCallbackData) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    HasSelection :: (this: *InputTextCallbackData) -> bool #cpp_method {
    }
    */

}
// #run check_size(InputTextCallbackData, 56);

SizeCallbackData :: struct {
    UserData: *void;
    Pos: ImVec2;
    CurrentSize: ImVec2;
    DesiredSize: ImVec2;
}
// #run check_size(SizeCallbackData, 32);

WindowClass :: struct {
    ClassId: ID;
    ParentViewportId: ID;
    ViewportFlagsOverrideSet: ViewportFlags;
    ViewportFlagsOverrideClear: ViewportFlags;
    TabItemFlagsOverrideSet: TabItemFlags;
    DockNodeFlagsOverrideSet: DockNodeFlags;
    DockNodeFlagsOverrideClear: DockNodeFlags;
    DockingAlwaysTabBar: bool;
    DockingAllowUnclassed: bool;
}
// #run check_size(WindowClass, 32);

Payload :: struct {
    Data: *void;
    DataSize: s32;
    SourceId: ID;
    SourceParentId: ID;
    DataFrameCount: s32;
    DataType_: [33] u8;
    Preview: bool;
    Delivery: bool;
    /* (jaicc: omitted inline function)
    Clear :: (this: *Payload) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    IsDataType :: (this: *Payload, type: *u8) -> bool #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    IsPreview :: (this: *Payload) -> bool #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    IsDelivery :: (this: *Payload) -> bool #cpp_method {
    }
    */

}
// #run check_size(Payload, 64);

TableColumnSortSpecs :: struct {
    ColumnUserID: ID;
    ColumnIndex: ImS16;
    SortOrder: ImS16;
    SortDirection_: SortDirection;
}
// #run check_size(TableColumnSortSpecs, 12);

TableSortSpecs :: struct {
    Specs: *TableColumnSortSpecs;
    SpecsCount: s32;
    SpecsDirty: bool;
}
// #run check_size(TableSortSpecs, 16);

OnceUponAFrame :: struct {
    RefFrame: s32;
}
// #run check_size(OnceUponAFrame, 4);

TextFilter :: struct {
    Draw :: (this: *TextFilter, label: *u8 = "Filter (inc,-exc)", width: float = 0.0) -> bool #cpp_method #foreign imgui "_ZN15ImGuiTextFilter4DrawEPKcf";
    PassFilter :: (this: *TextFilter, text: string) -> bool {
        PassFilter_internal :: (this: *TextFilter, text: *u8, text_end: *u8) -> bool #cpp_method #foreign imgui "_ZNK15ImGuiTextFilter10PassFilterEPKcS1_";
        return PassFilter_internal(this, text.data, text.data + text.count);
    }
    Build :: (this: *TextFilter) -> void #cpp_method #foreign imgui "_ZN15ImGuiTextFilter5BuildEv";
    /* (jaicc: omitted inline function)
    Clear :: (this: *TextFilter) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    IsActive :: (this: *TextFilter) -> bool #cpp_method {
    }
    */

    TextRange :: struct {
        b: *u8;
        e: *u8;
        /* (jaicc: omitted inline function)
        empty :: (this: *TextRange) -> bool #cpp_method {
        }
        */

        split :: (this: *TextRange, separator: u8, out: **ImVector(TextFilter.TextRange)) -> void #cpp_method #foreign imgui "_ZNK15ImGuiTextFilter14ImGuiTextRange5splitEcP8ImVectorIS0_E";
    }
// #run check_size(TextRange, 16);
    InputBuf: [256] u8;
    Filters: ImVector(TextFilter.TextRange);
    CountGrep: s32;
}
// #run check_size(TextFilter, 280);

TextBuffer :: struct {
    Buf: ImVector(s8);
    /* (jaicc: omitted inline function)
    operator[] :: (this: *TextBuffer, i: s32) -> u8 #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    begin :: (this: *TextBuffer) -> *u8 #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    end :: (this: *TextBuffer) -> *u8 #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    size :: (this: *TextBuffer) -> s32 #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    empty :: (this: *TextBuffer) -> bool #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    clear :: (this: *TextBuffer) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    reserve :: (this: *TextBuffer, capacity: s32) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    c_str :: (this: *TextBuffer) -> *u8 #cpp_method {
    }
    */

    append :: (this: *TextBuffer, str: string) {
        append_internal :: (this: *TextBuffer, str: *u8, str_end: *u8) -> void #cpp_method #foreign imgui "_ZN15ImGuiTextBuffer6appendEPKcS1_";
        append_internal(this, str.data, str.data + str.count);
    }
    appendf :: (this: *TextBuffer, fmt: *u8, __args: ..Any) -> void #cpp_method #foreign imgui "_ZN15ImGuiTextBuffer7appendfEPKcz";
    /* (jaicc: omitted function with valist)
    appendfv :: (this: *TextBuffer, fmt: *u8, args: va_list) -> void #cpp_method #foreign imgui "_ZN15ImGuiTextBuffer8appendfvEPKcP13__va_list_tag";
    */

}
// #run check_size(TextBuffer, 16);

Storage :: struct {
    StoragePair :: struct {
        key: ID;
        union {
            val_i: s32;
            val_f: float;
            val_p: *void;
        }
    }
// #run check_size(StoragePair, 16);
    Data: ImVector(Storage.StoragePair);
    /* (jaicc: omitted inline function)
    Clear :: (this: *Storage) -> void #cpp_method {
    }
    */

    GetInt :: (this: *Storage, key: ID, default_val: s32 = 0) -> s32 #cpp_method #foreign imgui "_ZNK12ImGuiStorage6GetIntEji";
    SetInt :: (this: *Storage, key: ID, val: s32) -> void #cpp_method #foreign imgui "_ZN12ImGuiStorage6SetIntEji";
    GetBool :: (this: *Storage, key: ID, default_val: bool = false) -> bool #cpp_method #foreign imgui "_ZNK12ImGuiStorage7GetBoolEjb";
    SetBool :: (this: *Storage, key: ID, val: bool) -> void #cpp_method #foreign imgui "_ZN12ImGuiStorage7SetBoolEjb";
    GetFloat :: (this: *Storage, key: ID, default_val: float = 0.0) -> float #cpp_method #foreign imgui "_ZNK12ImGuiStorage8GetFloatEjf";
    SetFloat :: (this: *Storage, key: ID, val: float) -> void #cpp_method #foreign imgui "_ZN12ImGuiStorage8SetFloatEjf";
    GetVoidPtr :: (this: *Storage, key: ID) -> *void #cpp_method #foreign imgui "_ZNK12ImGuiStorage10GetVoidPtrEj";
    SetVoidPtr :: (this: *Storage, key: ID, val: *void) -> void #cpp_method #foreign imgui "_ZN12ImGuiStorage10SetVoidPtrEjPv";
    GetIntRef :: (this: *Storage, key: ID, default_val: s32 = 0) -> *s32 #cpp_method #foreign imgui "_ZN12ImGuiStorage9GetIntRefEji";
    GetBoolRef :: (this: *Storage, key: ID, default_val: bool = false) -> *bool #cpp_method #foreign imgui "_ZN12ImGuiStorage10GetBoolRefEjb";
    GetFloatRef :: (this: *Storage, key: ID, default_val: float = 0.0) -> *float #cpp_method #foreign imgui "_ZN12ImGuiStorage11GetFloatRefEjf";
    GetVoidPtrRef :: (this: *Storage, key: ID, default_val: *void = null) -> **void #cpp_method #foreign imgui "_ZN12ImGuiStorage13GetVoidPtrRefEjPv";
    SetAllInt :: (this: *Storage, val: s32) -> void #cpp_method #foreign imgui "_ZN12ImGuiStorage9SetAllIntEi";
    BuildSortByKey :: (this: *Storage) -> void #cpp_method #foreign imgui "_ZN12ImGuiStorage14BuildSortByKeyEv";
}
// #run check_size(Storage, 16);

ListClipper :: struct {
    DisplayStart: s32;
    DisplayEnd: s32;
    ItemsCount: s32;
    StepNo: s32;
    ItemsFrozen: s32;
    ItemsHeight: float;
    StartPosY: float;
    Destructor :: (this: *ListClipper) -> void #cpp_method #foreign imgui "_ZN16ImGuiListClipperD1Ev";
    Begin :: (this: *ListClipper, items_count: s32, items_height: float = -1.0) -> void #cpp_method #foreign imgui "_ZN16ImGuiListClipper5BeginEif";
    End :: (this: *ListClipper) -> void #cpp_method #foreign imgui "_ZN16ImGuiListClipper3EndEv";
    Step :: (this: *ListClipper) -> bool #cpp_method #foreign imgui "_ZN16ImGuiListClipper4StepEv";
}
// #run check_size(ListClipper, 28);

ImColor :: struct {
    Value: ImVec4;
    /* (jaicc: omitted inline function)
    SetHSV :: (this: *ImColor, h: float, s: float, v: float, a: float = 1.0) -> void #cpp_method {
    }
    */

}
// #run check_size(ImColor, 16);

ImDrawCallback :: #type (a0: *ImDrawList, a1: *ImDrawCmd) -> void #c_call;

ImDrawCmd :: struct {
    ClipRect: ImVec4;
    TextureId: ImTextureID;
    VtxOffset: u32;
    IdxOffset: u32;
    ElemCount: u32;
    UserCallback: ImDrawCallback;
    UserCallbackData: *void;
    /* (jaicc: omitted inline function)
    GetTexID :: (this: *ImDrawCmd) -> ImTextureID #cpp_method {
    }
    */

}
// #run check_size(ImDrawCmd, 56);

ImDrawIdx :: u16;

ImDrawVert :: struct {
    pos: ImVec2;
    uv: ImVec2;
    col: ImU32;
}
// #run check_size(ImDrawVert, 20);

ImDrawCmdHeader :: struct {
    ClipRect: ImVec4;
    TextureId: ImTextureID;
    VtxOffset: u32;
}
// #run check_size(ImDrawCmdHeader, 32);

ImDrawChannel :: struct {
    _CmdBuffer: ImVector(ImDrawCmd);
    _IdxBuffer: ImVector(ImDrawIdx);
}
// #run check_size(ImDrawChannel, 32);

ImDrawListSplitter :: struct {
    _Current: s32;
    _Count: s32;
    _Channels: ImVector(ImDrawChannel);
    /* (jaicc: omitted inline function)
    Destructor :: (this: *ImDrawListSplitter) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    Clear :: (this: *ImDrawListSplitter) -> void #cpp_method {
    }
    */

    ClearFreeMemory :: (this: *ImDrawListSplitter) -> void #cpp_method #foreign imgui "_ZN18ImDrawListSplitter15ClearFreeMemoryEv";
    Split :: (this: *ImDrawListSplitter, draw_list: *ImDrawList, count: s32) -> void #cpp_method #foreign imgui "_ZN18ImDrawListSplitter5SplitEP10ImDrawListi";
    Merge :: (this: *ImDrawListSplitter, draw_list: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN18ImDrawListSplitter5MergeEP10ImDrawList";
    SetCurrentChannel :: (this: *ImDrawListSplitter, draw_list: *ImDrawList, channel_idx: s32) -> void #cpp_method #foreign imgui "_ZN18ImDrawListSplitter17SetCurrentChannelEP10ImDrawListi";
}
// #run check_size(ImDrawListSplitter, 24);

ImDrawFlags :: enum u32 {
    None :: 0;
    Closed :: 1;
    RoundCornersTopLeft :: 16;
    RoundCornersTopRight :: 32;
    RoundCornersBottomLeft :: 64;
    RoundCornersBottomRight :: 128;
    RoundCornersNone :: 256;
    RoundCornersTop :: 48;
    RoundCornersBottom :: 192;
    RoundCornersLeft :: 80;
    RoundCornersRight :: 160;
    RoundCornersAll :: 240;
    RoundCornersDefault_ :: 240;
    RoundCornersMask_ :: 496;
}

ImDrawListFlags :: enum u32 {
    None :: 0;
    AntiAliasedLines :: 1;
    AntiAliasedLinesUseTex :: 2;
    AntiAliasedFill :: 4;
    AllowVtxOffset :: 8;
}

ImDrawList :: struct {
    CmdBuffer: ImVector(ImDrawCmd);
    IdxBuffer: ImVector(ImDrawIdx);
    VtxBuffer: ImVector(ImDrawVert);
    Flags: ImDrawListFlags;
    _VtxCurrentIdx: u32;
    _Data: *ImDrawListSharedData;
    _OwnerName: *u8;
    _VtxWritePtr: *ImDrawVert;
    _IdxWritePtr: *ImDrawIdx;
    _ClipRectStack: ImVector(ImVec4);
    _TextureIdStack: ImVector(ImTextureID);
    _Path: ImVector(ImVec2);
    _CmdHeader: ImDrawCmdHeader;
    _Splitter: ImDrawListSplitter;
    _FringeScale: float;
    /* (jaicc: omitted inline function)
    Destructor :: (this: *ImDrawList) -> void #cpp_method {
    }
    */

    PushClipRect :: (this: *ImDrawList, clip_rect_min: ImVec2, clip_rect_max: ImVec2, intersect_with_current_clip_rect: bool = false) -> void #cpp_method #foreign imgui "_ZN10ImDrawList12PushClipRectE6ImVec2S0_b";
    PushClipRectFullScreen :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList22PushClipRectFullScreenEv";
    PopClipRect :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList11PopClipRectEv";
    PushTextureID :: (this: *ImDrawList, texture_id: ImTextureID) -> void #cpp_method #foreign imgui "_ZN10ImDrawList13PushTextureIDEPv";
    PopTextureID :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList12PopTextureIDEv";
    /* (jaicc: omitted inline function)
    GetClipRectMin :: (this: *ImDrawList) -> ImVec2 #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    GetClipRectMax :: (this: *ImDrawList) -> ImVec2 #cpp_method {
    }
    */

    AddLine :: (this: *ImDrawList, p1: ImVec2, p2: ImVec2, col: ImU32, thickness: float = 1.0) {
        AddLine_internal :: (this: *ImDrawList, p1: *ImVec2, p2: *ImVec2, col: ImU32, thickness: float) -> void #cpp_method #foreign imgui "_ZN10ImDrawList7AddLineERK6ImVec2S2_jf";
        AddLine_internal(this, *p1, *p2, col, thickness);
    }
    AddRect :: (this: *ImDrawList, p_min: ImVec2, p_max: ImVec2, col: ImU32, rounding: float = 0.0, flags: ImDrawFlags = .None, thickness: float = 1.0) {
        AddRect_internal :: (this: *ImDrawList, p_min: *ImVec2, p_max: *ImVec2, col: ImU32, rounding: float, flags: ImDrawFlags, thickness: float) -> void #cpp_method #foreign imgui "_ZN10ImDrawList7AddRectERK6ImVec2S2_jfif";
        AddRect_internal(this, *p_min, *p_max, col, rounding, flags, thickness);
    }
    AddRectFilled :: (this: *ImDrawList, p_min: ImVec2, p_max: ImVec2, col: ImU32, rounding: float = 0.0, flags: ImDrawFlags = .None) {
        AddRectFilled_internal :: (this: *ImDrawList, p_min: *ImVec2, p_max: *ImVec2, col: ImU32, rounding: float, flags: ImDrawFlags) -> void #cpp_method #foreign imgui "_ZN10ImDrawList13AddRectFilledERK6ImVec2S2_jfi";
        AddRectFilled_internal(this, *p_min, *p_max, col, rounding, flags);
    }
    AddRectFilledMultiColor :: (this: *ImDrawList, p_min: ImVec2, p_max: ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32) {
        AddRectFilledMultiColor_internal :: (this: *ImDrawList, p_min: *ImVec2, p_max: *ImVec2, col_upr_left: ImU32, col_upr_right: ImU32, col_bot_right: ImU32, col_bot_left: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList23AddRectFilledMultiColorERK6ImVec2S2_jjjj";
        AddRectFilledMultiColor_internal(this, *p_min, *p_max, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
    }
    AddQuad :: (this: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32, thickness: float = 1.0) {
        AddQuad_internal :: (this: *ImDrawList, p1: *ImVec2, p2: *ImVec2, p3: *ImVec2, p4: *ImVec2, col: ImU32, thickness: float) -> void #cpp_method #foreign imgui "_ZN10ImDrawList7AddQuadERK6ImVec2S2_S2_S2_jf";
        AddQuad_internal(this, *p1, *p2, *p3, *p4, col, thickness);
    }
    AddQuadFilled :: (this: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32) {
        AddQuadFilled_internal :: (this: *ImDrawList, p1: *ImVec2, p2: *ImVec2, p3: *ImVec2, p4: *ImVec2, col: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList13AddQuadFilledERK6ImVec2S2_S2_S2_j";
        AddQuadFilled_internal(this, *p1, *p2, *p3, *p4, col);
    }
    AddTriangle :: (this: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32, thickness: float = 1.0) {
        AddTriangle_internal :: (this: *ImDrawList, p1: *ImVec2, p2: *ImVec2, p3: *ImVec2, col: ImU32, thickness: float) -> void #cpp_method #foreign imgui "_ZN10ImDrawList11AddTriangleERK6ImVec2S2_S2_jf";
        AddTriangle_internal(this, *p1, *p2, *p3, col, thickness);
    }
    AddTriangleFilled :: (this: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32) {
        AddTriangleFilled_internal :: (this: *ImDrawList, p1: *ImVec2, p2: *ImVec2, p3: *ImVec2, col: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList17AddTriangleFilledERK6ImVec2S2_S2_j";
        AddTriangleFilled_internal(this, *p1, *p2, *p3, col);
    }
    AddCircle :: (this: *ImDrawList, center: ImVec2, radius: float, col: ImU32, num_segments: s32 = 0, thickness: float = 1.0) {
        AddCircle_internal :: (this: *ImDrawList, center: *ImVec2, radius: float, col: ImU32, num_segments: s32, thickness: float) -> void #cpp_method #foreign imgui "_ZN10ImDrawList9AddCircleERK6ImVec2fjif";
        AddCircle_internal(this, *center, radius, col, num_segments, thickness);
    }
    AddCircleFilled :: (this: *ImDrawList, center: ImVec2, radius: float, col: ImU32, num_segments: s32 = 0) {
        AddCircleFilled_internal :: (this: *ImDrawList, center: *ImVec2, radius: float, col: ImU32, num_segments: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList15AddCircleFilledERK6ImVec2fji";
        AddCircleFilled_internal(this, *center, radius, col, num_segments);
    }
    AddNgon :: (this: *ImDrawList, center: ImVec2, radius: float, col: ImU32, num_segments: s32, thickness: float = 1.0) {
        AddNgon_internal :: (this: *ImDrawList, center: *ImVec2, radius: float, col: ImU32, num_segments: s32, thickness: float) -> void #cpp_method #foreign imgui "_ZN10ImDrawList7AddNgonERK6ImVec2fjif";
        AddNgon_internal(this, *center, radius, col, num_segments, thickness);
    }
    AddNgonFilled :: (this: *ImDrawList, center: ImVec2, radius: float, col: ImU32, num_segments: s32) {
        AddNgonFilled_internal :: (this: *ImDrawList, center: *ImVec2, radius: float, col: ImU32, num_segments: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList13AddNgonFilledERK6ImVec2fji";
        AddNgonFilled_internal(this, *center, radius, col, num_segments);
    }
    AddText :: (this: *ImDrawList, pos: ImVec2, col: ImU32, text: string) {
        AddText_internal :: (this: *ImDrawList, pos: *ImVec2, col: ImU32, text_begin: *u8, text_end: *u8) -> void #cpp_method #foreign imgui "_ZN10ImDrawList7AddTextERK6ImVec2jPKcS4_";
        AddText_internal(this, *pos, col, text.data, text.data + text.count);
    }
    AddText :: (this: *ImDrawList, font: *ImFont, font_size: float, pos: ImVec2, col: ImU32, text: string, wrap_width: float = 0.0, cpu_fine_clip_rect: *ImVec4 = null) {
        AddText_internal :: (this: *ImDrawList, font: *ImFont, font_size: float, pos: *ImVec2, col: ImU32, text_begin: *u8, text_end: *u8, wrap_width: float, cpu_fine_clip_rect: *ImVec4) -> void #cpp_method #foreign imgui "_ZN10ImDrawList7AddTextEPK6ImFontfRK6ImVec2jPKcS7_fPK6ImVec4";
        AddText_internal(this, font, font_size, *pos, col, text.data, text.data + text.count, wrap_width, cpu_fine_clip_rect);
    }
    AddPolyline :: (this: *ImDrawList, points: *ImVec2, num_points: s32, col: ImU32, flags: ImDrawFlags, thickness: float) -> void #cpp_method #foreign imgui "_ZN10ImDrawList11AddPolylineEPK6ImVec2ijif";
    AddConvexPolyFilled :: (this: *ImDrawList, points: *ImVec2, num_points: s32, col: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList19AddConvexPolyFilledEPK6ImVec2ij";
    AddBezierCubic :: (this: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, col: ImU32, thickness: float, num_segments: s32 = 0) {
        AddBezierCubic_internal :: (this: *ImDrawList, p1: *ImVec2, p2: *ImVec2, p3: *ImVec2, p4: *ImVec2, col: ImU32, thickness: float, num_segments: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList14AddBezierCubicERK6ImVec2S2_S2_S2_jfi";
        AddBezierCubic_internal(this, *p1, *p2, *p3, *p4, col, thickness, num_segments);
    }
    AddBezierQuadratic :: (this: *ImDrawList, p1: ImVec2, p2: ImVec2, p3: ImVec2, col: ImU32, thickness: float, num_segments: s32 = 0) {
        AddBezierQuadratic_internal :: (this: *ImDrawList, p1: *ImVec2, p2: *ImVec2, p3: *ImVec2, col: ImU32, thickness: float, num_segments: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList18AddBezierQuadraticERK6ImVec2S2_S2_jfi";
        AddBezierQuadratic_internal(this, *p1, *p2, *p3, col, thickness, num_segments);
    }
    AddImage :: (this: *ImDrawList, user_texture_id: ImTextureID, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2 = ImVec2.{0,0}, uv_max: ImVec2 = ImVec2.{1,1}, col: ImU32 = 4294967295) {
        AddImage_internal :: (this: *ImDrawList, user_texture_id: ImTextureID, p_min: *ImVec2, p_max: *ImVec2, uv_min: *ImVec2, uv_max: *ImVec2, col: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList8AddImageEPvRK6ImVec2S3_S3_S3_j";
        AddImage_internal(this, user_texture_id, *p_min, *p_max, *uv_min, *uv_max, col);
    }
    AddImageQuad :: (this: *ImDrawList, user_texture_id: ImTextureID, p1: ImVec2, p2: ImVec2, p3: ImVec2, p4: ImVec2, uv1: ImVec2 = ImVec2.{0,0}, uv2: ImVec2 = ImVec2.{1,0}, uv3: ImVec2 = ImVec2.{1,1}, uv4: ImVec2 = ImVec2.{0,1}, col: ImU32 = 4294967295) {
        AddImageQuad_internal :: (this: *ImDrawList, user_texture_id: ImTextureID, p1: *ImVec2, p2: *ImVec2, p3: *ImVec2, p4: *ImVec2, uv1: *ImVec2, uv2: *ImVec2, uv3: *ImVec2, uv4: *ImVec2, col: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList12AddImageQuadEPvRK6ImVec2S3_S3_S3_S3_S3_S3_S3_j";
        AddImageQuad_internal(this, user_texture_id, *p1, *p2, *p3, *p4, *uv1, *uv2, *uv3, *uv4, col);
    }
    AddImageRounded :: (this: *ImDrawList, user_texture_id: ImTextureID, p_min: ImVec2, p_max: ImVec2, uv_min: ImVec2, uv_max: ImVec2, col: ImU32, rounding: float, flags: ImDrawFlags = .None) {
        AddImageRounded_internal :: (this: *ImDrawList, user_texture_id: ImTextureID, p_min: *ImVec2, p_max: *ImVec2, uv_min: *ImVec2, uv_max: *ImVec2, col: ImU32, rounding: float, flags: ImDrawFlags) -> void #cpp_method #foreign imgui "_ZN10ImDrawList15AddImageRoundedEPvRK6ImVec2S3_S3_S3_jfi";
        AddImageRounded_internal(this, user_texture_id, *p_min, *p_max, *uv_min, *uv_max, col, rounding, flags);
    }
    /* (jaicc: omitted inline function)
    PathClear :: (this: *ImDrawList) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    PathLineTo :: (this: *ImDrawList, pos: ImVec2) {
        PathLineTo_internal :: (this: *ImDrawList, pos: *ImVec2) -> void #cpp_method {
        }
        PathLineTo_internal(this, *pos);
    }
    */

    /* (jaicc: omitted inline function)
    PathLineToMergeDuplicate :: (this: *ImDrawList, pos: ImVec2) {
        PathLineToMergeDuplicate_internal :: (this: *ImDrawList, pos: *ImVec2) -> void #cpp_method {
        }
        PathLineToMergeDuplicate_internal(this, *pos);
    }
    */

    /* (jaicc: omitted inline function)
    PathFillConvex :: (this: *ImDrawList, col: ImU32) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    PathStroke :: (this: *ImDrawList, col: ImU32, flags: ImDrawFlags = .None, thickness: float = 1.0) -> void #cpp_method {
    }
    */

    PathArcTo :: (this: *ImDrawList, center: ImVec2, radius: float, a_min: float, a_max: float, num_segments: s32 = 0) {
        PathArcTo_internal :: (this: *ImDrawList, center: *ImVec2, radius: float, a_min: float, a_max: float, num_segments: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList9PathArcToERK6ImVec2fffi";
        PathArcTo_internal(this, *center, radius, a_min, a_max, num_segments);
    }
    PathArcToFast :: (this: *ImDrawList, center: ImVec2, radius: float, a_min_of_12: s32, a_max_of_12: s32) {
        PathArcToFast_internal :: (this: *ImDrawList, center: *ImVec2, radius: float, a_min_of_12: s32, a_max_of_12: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList13PathArcToFastERK6ImVec2fii";
        PathArcToFast_internal(this, *center, radius, a_min_of_12, a_max_of_12);
    }
    PathBezierCubicCurveTo :: (this: *ImDrawList, p2: ImVec2, p3: ImVec2, p4: ImVec2, num_segments: s32 = 0) {
        PathBezierCubicCurveTo_internal :: (this: *ImDrawList, p2: *ImVec2, p3: *ImVec2, p4: *ImVec2, num_segments: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList22PathBezierCubicCurveToERK6ImVec2S2_S2_i";
        PathBezierCubicCurveTo_internal(this, *p2, *p3, *p4, num_segments);
    }
    PathBezierQuadraticCurveTo :: (this: *ImDrawList, p2: ImVec2, p3: ImVec2, num_segments: s32 = 0) {
        PathBezierQuadraticCurveTo_internal :: (this: *ImDrawList, p2: *ImVec2, p3: *ImVec2, num_segments: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList26PathBezierQuadraticCurveToERK6ImVec2S2_i";
        PathBezierQuadraticCurveTo_internal(this, *p2, *p3, num_segments);
    }
    PathRect :: (this: *ImDrawList, rect_min: ImVec2, rect_max: ImVec2, rounding: float = 0.0, flags: ImDrawFlags = .None) {
        PathRect_internal :: (this: *ImDrawList, rect_min: *ImVec2, rect_max: *ImVec2, rounding: float, flags: ImDrawFlags) -> void #cpp_method #foreign imgui "_ZN10ImDrawList8PathRectERK6ImVec2S2_fi";
        PathRect_internal(this, *rect_min, *rect_max, rounding, flags);
    }
    AddCallback :: (this: *ImDrawList, callback: ImDrawCallback, callback_data: *void) -> void #cpp_method #foreign imgui "_ZN10ImDrawList11AddCallbackEPFvPKS_PK9ImDrawCmdEPv";
    AddDrawCmd :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList10AddDrawCmdEv";
    CloneOutput :: (this: *ImDrawList) -> *ImDrawList #cpp_method #foreign imgui "_ZNK10ImDrawList11CloneOutputEv";
    /* (jaicc: omitted inline function)
    ChannelsSplit :: (this: *ImDrawList, count: s32) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    ChannelsMerge :: (this: *ImDrawList) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    ChannelsSetCurrent :: (this: *ImDrawList, n: s32) -> void #cpp_method {
    }
    */

    PrimReserve :: (this: *ImDrawList, idx_count: s32, vtx_count: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList11PrimReserveEii";
    PrimUnreserve :: (this: *ImDrawList, idx_count: s32, vtx_count: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList13PrimUnreserveEii";
    PrimRect :: (this: *ImDrawList, a: ImVec2, b: ImVec2, col: ImU32) {
        PrimRect_internal :: (this: *ImDrawList, a: *ImVec2, b: *ImVec2, col: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList8PrimRectERK6ImVec2S2_j";
        PrimRect_internal(this, *a, *b, col);
    }
    PrimRectUV :: (this: *ImDrawList, a: ImVec2, b: ImVec2, uv_a: ImVec2, uv_b: ImVec2, col: ImU32) {
        PrimRectUV_internal :: (this: *ImDrawList, a: *ImVec2, b: *ImVec2, uv_a: *ImVec2, uv_b: *ImVec2, col: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList10PrimRectUVERK6ImVec2S2_S2_S2_j";
        PrimRectUV_internal(this, *a, *b, *uv_a, *uv_b, col);
    }
    PrimQuadUV :: (this: *ImDrawList, a: ImVec2, b: ImVec2, c: ImVec2, d: ImVec2, uv_a: ImVec2, uv_b: ImVec2, uv_c: ImVec2, uv_d: ImVec2, col: ImU32) {
        PrimQuadUV_internal :: (this: *ImDrawList, a: *ImVec2, b: *ImVec2, c: *ImVec2, d: *ImVec2, uv_a: *ImVec2, uv_b: *ImVec2, uv_c: *ImVec2, uv_d: *ImVec2, col: ImU32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList10PrimQuadUVERK6ImVec2S2_S2_S2_S2_S2_S2_S2_j";
        PrimQuadUV_internal(this, *a, *b, *c, *d, *uv_a, *uv_b, *uv_c, *uv_d, col);
    }
    /* (jaicc: omitted inline function)
    PrimWriteVtx :: (this: *ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32) {
        PrimWriteVtx_internal :: (this: *ImDrawList, pos: *ImVec2, uv: *ImVec2, col: ImU32) -> void #cpp_method {
        }
        PrimWriteVtx_internal(this, *pos, *uv, col);
    }
    */

    /* (jaicc: omitted inline function)
    PrimWriteIdx :: (this: *ImDrawList, idx: ImDrawIdx) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    PrimVtx :: (this: *ImDrawList, pos: ImVec2, uv: ImVec2, col: ImU32) {
        PrimVtx_internal :: (this: *ImDrawList, pos: *ImVec2, uv: *ImVec2, col: ImU32) -> void #cpp_method {
        }
        PrimVtx_internal(this, *pos, *uv, col);
    }
    */

    _ResetForNewFrame :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList17_ResetForNewFrameEv";
    _ClearFreeMemory :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList16_ClearFreeMemoryEv";
    _PopUnusedDrawCmd :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList17_PopUnusedDrawCmdEv";
    _TryMergeDrawCmds :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList17_TryMergeDrawCmdsEv";
    _OnChangedClipRect :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList18_OnChangedClipRectEv";
    _OnChangedTextureID :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList19_OnChangedTextureIDEv";
    _OnChangedVtxOffset :: (this: *ImDrawList) -> void #cpp_method #foreign imgui "_ZN10ImDrawList19_OnChangedVtxOffsetEv";
    _CalcCircleAutoSegmentCount :: (this: *ImDrawList, radius: float) -> s32 #cpp_method #foreign imgui "_ZNK10ImDrawList27_CalcCircleAutoSegmentCountEf";
    _PathArcToFastEx :: (this: *ImDrawList, center: ImVec2, radius: float, a_min_sample: s32, a_max_sample: s32, a_step: s32) {
        _PathArcToFastEx_internal :: (this: *ImDrawList, center: *ImVec2, radius: float, a_min_sample: s32, a_max_sample: s32, a_step: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList16_PathArcToFastExERK6ImVec2fiii";
        _PathArcToFastEx_internal(this, *center, radius, a_min_sample, a_max_sample, a_step);
    }
    _PathArcToN :: (this: *ImDrawList, center: ImVec2, radius: float, a_min: float, a_max: float, num_segments: s32) {
        _PathArcToN_internal :: (this: *ImDrawList, center: *ImVec2, radius: float, a_min: float, a_max: float, num_segments: s32) -> void #cpp_method #foreign imgui "_ZN10ImDrawList11_PathArcToNERK6ImVec2fffi";
        _PathArcToN_internal(this, *center, radius, a_min, a_max, num_segments);
    }
}
// #run check_size(ImDrawList, 200);

ImDrawData :: struct {
    Valid: bool;
    CmdListsCount: s32;
    TotalIdxCount: s32;
    TotalVtxCount: s32;
    CmdLists: **ImDrawList;
    DisplayPos: ImVec2;
    DisplaySize: ImVec2;
    FramebufferScale: ImVec2;
    OwnerViewport: *Viewport;
    /* (jaicc: omitted inline function)
    Clear :: (this: *ImDrawData) -> void #cpp_method {
    }
    */

    DeIndexAllBuffers :: (this: *ImDrawData) -> void #cpp_method #foreign imgui "_ZN10ImDrawData17DeIndexAllBuffersEv";
    ScaleClipRects :: (this: *ImDrawData, fb_scale: ImVec2) {
        ScaleClipRects_internal :: (this: *ImDrawData, fb_scale: *ImVec2) -> void #cpp_method #foreign imgui "_ZN10ImDrawData14ScaleClipRectsERK6ImVec2";
        ScaleClipRects_internal(this, *fb_scale);
    }
}
// #run check_size(ImDrawData, 56);

ImFontConfig :: struct {
    FontData: *void;
    FontDataSize: s32;
    FontDataOwnedByAtlas: bool;
    FontNo: s32;
    SizePixels: float;
    OversampleH: s32;
    OversampleV: s32;
    PixelSnapH: bool;
    GlyphExtraSpacing: ImVec2;
    GlyphOffset: ImVec2;
    GlyphRanges: *ImWchar;
    GlyphMinAdvanceX: float;
    GlyphMaxAdvanceX: float;
    MergeMode: bool;
    FontBuilderFlags: u32;
    RasterizerMultiply: float;
    EllipsisChar: ImWchar;
    Name: [40] u8;
    DstFont: *ImFont;
}
// #run check_size(ImFontConfig, 136);

ImFontGlyph :: struct {
    Colored: u32;
    #place Colored; /*bitfield 1*/     Visible: u32;
    #place Colored; /*bitfield 2*/     Codepoint: u32;
    AdvanceX: float;
    X0: float;
    Y0: float;
    X1: float;
    Y1: float;
    U0: float;
    V0: float;
    U1: float;
    V1: float;
}
// #run check_size(ImFontGlyph, 40);

ImFontGlyphRangesBuilder :: struct {
    UsedChars: ImVector(ImU32);
    /* (jaicc: omitted inline function)
    Clear :: (this: *ImFontGlyphRangesBuilder) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    GetBit :: (this: *ImFontGlyphRangesBuilder, n: size_t) -> bool #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    SetBit :: (this: *ImFontGlyphRangesBuilder, n: size_t) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    AddChar :: (this: *ImFontGlyphRangesBuilder, c: ImWchar) -> void #cpp_method {
    }
    */

    AddText :: (this: *ImFontGlyphRangesBuilder, text: string) {
        AddText_internal :: (this: *ImFontGlyphRangesBuilder, text: *u8, text_end: *u8) -> void #cpp_method #foreign imgui "_ZN24ImFontGlyphRangesBuilder7AddTextEPKcS1_";
        AddText_internal(this, text.data, text.data + text.count);
    }
    AddRanges :: (this: *ImFontGlyphRangesBuilder, ranges: *ImWchar) -> void #cpp_method #foreign imgui "_ZN24ImFontGlyphRangesBuilder9AddRangesEPKt";
    BuildRanges :: (this: *ImFontGlyphRangesBuilder, out_ranges: **ImVector(u16)) -> void #cpp_method #foreign imgui "_ZN24ImFontGlyphRangesBuilder11BuildRangesEP8ImVectorItE";
}
// #run check_size(ImFontGlyphRangesBuilder, 16);

ImFontAtlasCustomRect :: struct {
    Width: u16;
    Height: u16;
    X: u16;
    Y: u16;
    GlyphID: u32;
    GlyphAdvanceX: float;
    GlyphOffset: ImVec2;
    Font: *ImFont;
    /* (jaicc: omitted inline function)
    IsPacked :: (this: *ImFontAtlasCustomRect) -> bool #cpp_method {
    }
    */

}
// #run check_size(ImFontAtlasCustomRect, 32);

ImFontAtlasFlags :: enum u32 {
    None :: 0;
    NoPowerOfTwoHeight :: 1;
    NoMouseCursors :: 2;
    NoBakedLines :: 4;
}

ImFontAtlas :: struct {
    Destructor :: (this: *ImFontAtlas) -> void #cpp_method #foreign imgui "_ZN11ImFontAtlasD1Ev";
    AddFont :: (this: *ImFontAtlas, font_cfg: *ImFontConfig) -> *ImFont #cpp_method #foreign imgui "_ZN11ImFontAtlas7AddFontEPK12ImFontConfig";
    AddFontDefault :: (this: *ImFontAtlas, font_cfg: *ImFontConfig = null) -> *ImFont #cpp_method #foreign imgui "_ZN11ImFontAtlas14AddFontDefaultEPK12ImFontConfig";
    AddFontFromFileTTF :: (this: *ImFontAtlas, filename: *u8, size_pixels: float, font_cfg: *ImFontConfig = null, glyph_ranges: *ImWchar = null) -> *ImFont #cpp_method #foreign imgui "_ZN11ImFontAtlas18AddFontFromFileTTFEPKcfPK12ImFontConfigPKt";
    AddFontFromMemoryTTF :: (this: *ImFontAtlas, font_data: *void, font_size: s32, size_pixels: float, font_cfg: *ImFontConfig = null, glyph_ranges: *ImWchar = null) -> *ImFont #cpp_method #foreign imgui "_ZN11ImFontAtlas20AddFontFromMemoryTTFEPvifPK12ImFontConfigPKt";
    AddFontFromMemoryCompressedTTF :: (this: *ImFontAtlas, compressed_font_data: *void, compressed_font_size: s32, size_pixels: float, font_cfg: *ImFontConfig = null, glyph_ranges: *ImWchar = null) -> *ImFont #cpp_method #foreign imgui "_ZN11ImFontAtlas30AddFontFromMemoryCompressedTTFEPKvifPK12ImFontConfigPKt";
    AddFontFromMemoryCompressedBase85TTF :: (this: *ImFontAtlas, compressed_font_data_base85: *u8, size_pixels: float, font_cfg: *ImFontConfig = null, glyph_ranges: *ImWchar = null) -> *ImFont #cpp_method #foreign imgui "_ZN11ImFontAtlas36AddFontFromMemoryCompressedBase85TTFEPKcfPK12ImFontConfigPKt";
    ClearInputData :: (this: *ImFontAtlas) -> void #cpp_method #foreign imgui "_ZN11ImFontAtlas14ClearInputDataEv";
    ClearTexData :: (this: *ImFontAtlas) -> void #cpp_method #foreign imgui "_ZN11ImFontAtlas12ClearTexDataEv";
    ClearFonts :: (this: *ImFontAtlas) -> void #cpp_method #foreign imgui "_ZN11ImFontAtlas10ClearFontsEv";
    Clear :: (this: *ImFontAtlas) -> void #cpp_method #foreign imgui "_ZN11ImFontAtlas5ClearEv";
    Build :: (this: *ImFontAtlas) -> bool #cpp_method #foreign imgui "_ZN11ImFontAtlas5BuildEv";
    GetTexDataAsAlpha8 :: (this: *ImFontAtlas, out_pixels: **u8, out_width: *s32, out_height: *s32, out_bytes_per_pixel: *s32 = null) -> void #cpp_method #foreign imgui "_ZN11ImFontAtlas18GetTexDataAsAlpha8EPPhPiS2_S2_";
    GetTexDataAsRGBA32 :: (this: *ImFontAtlas, out_pixels: **u8, out_width: *s32, out_height: *s32, out_bytes_per_pixel: *s32 = null) -> void #cpp_method #foreign imgui "_ZN11ImFontAtlas18GetTexDataAsRGBA32EPPhPiS2_S2_";
    /* (jaicc: omitted inline function)
    IsBuilt :: (this: *ImFontAtlas) -> bool #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    SetTexID :: (this: *ImFontAtlas, id: ImTextureID) -> void #cpp_method {
    }
    */

    GetGlyphRangesDefault :: (this: *ImFontAtlas) -> *ImWchar #cpp_method #foreign imgui "_ZN11ImFontAtlas21GetGlyphRangesDefaultEv";
    GetGlyphRangesKorean :: (this: *ImFontAtlas) -> *ImWchar #cpp_method #foreign imgui "_ZN11ImFontAtlas20GetGlyphRangesKoreanEv";
    GetGlyphRangesJapanese :: (this: *ImFontAtlas) -> *ImWchar #cpp_method #foreign imgui "_ZN11ImFontAtlas22GetGlyphRangesJapaneseEv";
    GetGlyphRangesChineseFull :: (this: *ImFontAtlas) -> *ImWchar #cpp_method #foreign imgui "_ZN11ImFontAtlas25GetGlyphRangesChineseFullEv";
    GetGlyphRangesChineseSimplifiedCommon :: (this: *ImFontAtlas) -> *ImWchar #cpp_method #foreign imgui "_ZN11ImFontAtlas37GetGlyphRangesChineseSimplifiedCommonEv";
    GetGlyphRangesCyrillic :: (this: *ImFontAtlas) -> *ImWchar #cpp_method #foreign imgui "_ZN11ImFontAtlas22GetGlyphRangesCyrillicEv";
    GetGlyphRangesThai :: (this: *ImFontAtlas) -> *ImWchar #cpp_method #foreign imgui "_ZN11ImFontAtlas18GetGlyphRangesThaiEv";
    GetGlyphRangesVietnamese :: (this: *ImFontAtlas) -> *ImWchar #cpp_method #foreign imgui "_ZN11ImFontAtlas24GetGlyphRangesVietnameseEv";
    AddCustomRectRegular :: (this: *ImFontAtlas, width: s32, height: s32) -> s32 #cpp_method #foreign imgui "_ZN11ImFontAtlas20AddCustomRectRegularEii";
    AddCustomRectFontGlyph :: (this: *ImFontAtlas, font: *ImFont, id: ImWchar, width: s32, height: s32, advance_x: float, offset: ImVec2 = ImVec2.{0,0}) -> s32 {
        AddCustomRectFontGlyph_internal :: (this: *ImFontAtlas, font: *ImFont, id: ImWchar, width: s32, height: s32, advance_x: float, offset: *ImVec2) -> s32 #cpp_method #foreign imgui "_ZN11ImFontAtlas22AddCustomRectFontGlyphEP6ImFonttiifRK6ImVec2";
        return AddCustomRectFontGlyph_internal(this, font, id, width, height, advance_x, *offset);
    }
    /* (jaicc: omitted inline function)
    GetCustomRectByIndex :: (this: *ImFontAtlas, index: s32) -> *ImFontAtlasCustomRect #cpp_method {
    }
    */

    CalcCustomRectUV :: (this: *ImFontAtlas, rect: *ImFontAtlasCustomRect, out_uv_min: *ImVec2, out_uv_max: *ImVec2) -> void #cpp_method #foreign imgui "_ZNK11ImFontAtlas16CalcCustomRectUVEPK21ImFontAtlasCustomRectP6ImVec2S4_";
    GetMouseCursorTexData :: (this: *ImFontAtlas, cursor: MouseCursor, out_offset: *ImVec2, out_size: *ImVec2, out_uv_border: *[2] ImVec2, out_uv_fill: *[2] ImVec2) -> bool #cpp_method #foreign imgui "_ZN11ImFontAtlas21GetMouseCursorTexDataEiP6ImVec2S1_S1_S1_";
    Flags: ImFontAtlasFlags;
    TexID: ImTextureID;
    TexDesiredWidth: s32;
    TexGlyphPadding: s32;
    Locked: bool;
    TexPixelsUseColors: bool;
    TexPixelsAlpha8: *u8;
    TexPixelsRGBA32: *u32;
    TexWidth: s32;
    TexHeight: s32;
    TexUvScale: ImVec2;
    TexUvWhitePixel: ImVec2;
    Fonts: ImVector(*ImFont);
    CustomRects: ImVector(ImFontAtlasCustomRect);
    ConfigData: ImVector(ImFontConfig);
    TexUvLines: [64] ImVec4;
    FontBuilderIO: *ImFontBuilderIO;
    FontBuilderFlags: u32;
    PackIdMouseCursors: s32;
    PackIdLines: s32;
}
// #run check_size(ImFontAtlas, 1168);

ImFont :: struct {
    IndexAdvanceX: ImVector(float);
    FallbackAdvanceX: float;
    FontSize: float;
    IndexLookup: ImVector(u16);
    Glyphs: ImVector(ImFontGlyph);
    FallbackGlyph: *ImFontGlyph;
    ContainerAtlas: *ImFontAtlas;
    ConfigData: *ImFontConfig;
    ConfigDataCount: s16;
    FallbackChar: ImWchar;
    EllipsisChar: ImWchar;
    DotChar: ImWchar;
    DirtyLookupTables: bool;
    Scale: float;
    Ascent: float;
    Descent: float;
    MetricsTotalSurface: s32;
    Used4kPagesMap: [2] ImU8;
    Destructor :: (this: *ImFont) -> void #cpp_method #foreign imgui "_ZN6ImFontD1Ev";
    FindGlyph :: (this: *ImFont, c: ImWchar) -> *ImFontGlyph #cpp_method #foreign imgui "_ZNK6ImFont9FindGlyphEt";
    FindGlyphNoFallback :: (this: *ImFont, c: ImWchar) -> *ImFontGlyph #cpp_method #foreign imgui "_ZNK6ImFont19FindGlyphNoFallbackEt";
    /* (jaicc: omitted inline function)
    GetCharAdvance :: (this: *ImFont, c: ImWchar) -> float #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    IsLoaded :: (this: *ImFont) -> bool #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    GetDebugName :: (this: *ImFont) -> *u8 #cpp_method {
    }
    */

    CalcTextSizeA :: (this: *ImFont, size: float, max_width: float, wrap_width: float, text: string, remaining: **u8 = null) -> ImVec2 {
        CalcTextSizeA_internal :: (this: *ImFont, size: float, max_width: float, wrap_width: float, text_begin: *u8, text_end: *u8, remaining: **u8) -> ImVec2 #cpp_method #foreign imgui "_ZNK6ImFont13CalcTextSizeAEfffPKcS1_PS1_";
        return CalcTextSizeA_internal(this, size, max_width, wrap_width, text.data, text.data + text.count, remaining);
    }
    CalcWordWrapPositionA :: (this: *ImFont, scale: float, text: string, wrap_width: float) -> *u8 {
        CalcWordWrapPositionA_internal :: (this: *ImFont, scale: float, text: *u8, text_end: *u8, wrap_width: float) -> *u8 #cpp_method #foreign imgui "_ZNK6ImFont21CalcWordWrapPositionAEfPKcS1_f";
        return CalcWordWrapPositionA_internal(this, scale, text.data, text.data + text.count, wrap_width);
    }
    RenderChar :: (this: *ImFont, draw_list: *ImDrawList, size: float, pos: ImVec2, col: ImU32, c: ImWchar) -> void #cpp_method #foreign imgui "_ZNK6ImFont10RenderCharEP10ImDrawListf6ImVec2jt";
    RenderText :: (this: *ImFont, draw_list: *ImDrawList, size: float, pos: ImVec2, col: ImU32, clip_rect: ImVec4, text: string, wrap_width: float = 0.0, cpu_fine_clip: bool = false) {
        RenderText_internal :: (this: *ImFont, draw_list: *ImDrawList, size: float, pos: ImVec2, col: ImU32, clip_rect: *ImVec4, text_begin: *u8, text_end: *u8, wrap_width: float, cpu_fine_clip: bool) -> void #cpp_method #foreign imgui "_ZNK6ImFont10RenderTextEP10ImDrawListf6ImVec2jRK6ImVec4PKcS7_fb";
        RenderText_internal(this, draw_list, size, pos, col, *clip_rect, text.data, text.data + text.count, wrap_width, cpu_fine_clip);
    }
    BuildLookupTable :: (this: *ImFont) -> void #cpp_method #foreign imgui "_ZN6ImFont16BuildLookupTableEv";
    ClearOutputData :: (this: *ImFont) -> void #cpp_method #foreign imgui "_ZN6ImFont15ClearOutputDataEv";
    GrowIndex :: (this: *ImFont, new_size: s32) -> void #cpp_method #foreign imgui "_ZN6ImFont9GrowIndexEi";
    AddGlyph :: (this: *ImFont, src_cfg: *ImFontConfig, c: ImWchar, x0: float, y0: float, x1: float, y1: float, u0: float, v0: float, u1: float, v1: float, advance_x: float) -> void #cpp_method #foreign imgui "_ZN6ImFont8AddGlyphEPK12ImFontConfigtfffffffff";
    AddRemapChar :: (this: *ImFont, dst: ImWchar, src: ImWchar, overwrite_dst: bool = true) -> void #cpp_method #foreign imgui "_ZN6ImFont12AddRemapCharEttb";
    SetGlyphVisible :: (this: *ImFont, c: ImWchar, visible: bool) -> void #cpp_method #foreign imgui "_ZN6ImFont15SetGlyphVisibleEtb";
    IsGlyphRangeUnused :: (this: *ImFont, c_begin: u32, c_last: u32) -> bool #cpp_method #foreign imgui "_ZN6ImFont18IsGlyphRangeUnusedEjj";
}
// #run check_size(ImFont, 112);

ViewportFlags :: enum u32 {
    None :: 0;
    IsPlatformWindow :: 1;
    IsPlatformMonitor :: 2;
    OwnedByApp :: 4;
    NoDecoration :: 8;
    NoTaskBarIcon :: 16;
    NoFocusOnAppearing :: 32;
    NoFocusOnClick :: 64;
    NoInputs :: 128;
    NoRendererClear :: 256;
    TopMost :: 512;
    Minimized :: 1024;
    NoAutoMerge :: 2048;
    CanHostOtherWindows :: 4096;
}

Viewport :: struct {
    ID_: ID;
    Flags: ViewportFlags;
    Pos: ImVec2;
    Size: ImVec2;
    WorkPos: ImVec2;
    WorkSize: ImVec2;
    DpiScale: float;
    ParentViewportId: ID;
    DrawData: *ImDrawData;
    RendererUserData: *void;
    PlatformUserData: *void;
    PlatformHandle: *void;
    PlatformHandleRaw: *void;
    PlatformRequestMove: bool;
    PlatformRequestResize: bool;
    PlatformRequestClose: bool;
    /* (jaicc: omitted inline function)
    Destructor :: (this: *Viewport) -> void #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    GetCenter :: (this: *Viewport) -> ImVec2 #cpp_method {
    }
    */

    /* (jaicc: omitted inline function)
    GetWorkCenter :: (this: *Viewport) -> ImVec2 #cpp_method {
    }
    */

}
// #run check_size(Viewport, 96);

PlatformIO :: struct {
    Platform_CreateWindow: #type (a0: *Viewport) -> void #c_call;
    Platform_DestroyWindow: #type (a0: *Viewport) -> void #c_call;
    Platform_ShowWindow: #type (a0: *Viewport) -> void #c_call;
    Platform_SetWindowPos: #type (a0: *Viewport, a1: ImVec2) -> void #c_call;
    Platform_GetWindowPos: #type (a0: *Viewport) -> ImVec2 #c_call;
    Platform_SetWindowSize: #type (a0: *Viewport, a1: ImVec2) -> void #c_call;
    Platform_GetWindowSize: #type (a0: *Viewport) -> ImVec2 #c_call;
    Platform_SetWindowFocus: #type (a0: *Viewport) -> void #c_call;
    Platform_GetWindowFocus: #type (a0: *Viewport) -> bool #c_call;
    Platform_GetWindowMinimized: #type (a0: *Viewport) -> bool #c_call;
    Platform_SetWindowTitle: #type (a0: *Viewport, a1: *u8) -> void #c_call;
    Platform_SetWindowAlpha: #type (a0: *Viewport, a1: float) -> void #c_call;
    Platform_UpdateWindow: #type (a0: *Viewport) -> void #c_call;
    Platform_RenderWindow: #type (a0: *Viewport, a1: *void) -> void #c_call;
    Platform_SwapBuffers: #type (a0: *Viewport, a1: *void) -> void #c_call;
    Platform_GetWindowDpiScale: #type (a0: *Viewport) -> float #c_call;
    Platform_OnChangedViewport: #type (a0: *Viewport) -> void #c_call;
    Platform_SetImeInputPos: #type (a0: *Viewport, a1: ImVec2) -> void #c_call;
    Platform_CreateVkSurface: #type (a0: *Viewport, a1: ImU64, a2: *void, a3: *ImU64) -> s32 #c_call;
    Renderer_CreateWindow: #type (a0: *Viewport) -> void #c_call;
    Renderer_DestroyWindow: #type (a0: *Viewport) -> void #c_call;
    Renderer_SetWindowSize: #type (a0: *Viewport, a1: ImVec2) -> void #c_call;
    Renderer_RenderWindow: #type (a0: *Viewport, a1: *void) -> void #c_call;
    Renderer_SwapBuffers: #type (a0: *Viewport, a1: *void) -> void #c_call;
    Monitors: ImVector(PlatformMonitor);
    Viewports: ImVector(*Viewport);
}
// #run check_size(PlatformIO, 224);

PlatformMonitor :: struct {
    MainPos: ImVec2;
    MainSize: ImVec2;
    WorkPos: ImVec2;
    WorkSize: ImVec2;
    DpiScale: float;
}
// #run check_size(PlatformMonitor, 36);

Preprocessor_Defines :: struct {
    USE_BGRA_PACKED_COLOR: bool : true;
}

